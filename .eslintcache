[{"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\index.js":"1","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\reportWebVitals.js":"2","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\App.js":"3","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\serviceWorker.js":"4","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\game.js":"5","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\storage.js":"6","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\login.js":"7","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\scanner.js":"8","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\auth.js":"9","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\ardorinterface.js":"10","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\constants.js":"11","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\sendtoken.js":"12","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\sendcard.js":"13","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\user.js":"14","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\common.js":"15","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\sendmoney.js":"16","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\navigation.js":"17","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\faq.js":"18","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\txhistory.js":"19","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\new.js":"20","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\snackbar.js":"21","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\accountfield.js":"22","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\loginform.js":"23","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\returning.js":"24","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\validators.js":"25","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\showqrcode.js":"26","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\wallet.js":"27","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\fundaccount.js":"28","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\carddetail.js":"29","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\buypack.js":"30","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\monsterpage.js":"31","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\jackpot.js":"32","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\tarasca.js":"33","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cancel.js":"34","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\exchange.js":"35","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardorder.js":"36","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\signactionfield.js":"37","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\txsuccess.js":"38","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\cardinfo.js":"39","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\confirmdialog.js":"40","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\backbutton.js":"41","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\generatePassphrase.js":"42","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\trades.js":"43","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardaskorder.js":"44","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\orderbook.js":"45","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardbidorder.js":"46","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\filter.js":"47","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\accountorderbook.js":"48","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\countdown.js":"49","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\claim.js":"50","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardrowdisplay.js":"51","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\progress.js":"52","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\carddeck.js":"53","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\newuser.js":"54","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\accountordertable.js":"55","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\thumb.js":"56","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\carddisplay.js":"57"},{"size":1036,"mtime":1608319744249,"results":"58","hashOfConfig":"59"},{"size":362,"mtime":499162500000,"results":"60","hashOfConfig":"59"},{"size":3510,"mtime":1608319744208,"results":"61","hashOfConfig":"59"},{"size":4948,"mtime":1608319744261,"results":"62","hashOfConfig":"59"},{"size":23489,"mtime":1608319744238,"results":"63","hashOfConfig":"59"},{"size":2933,"mtime":1608319745138,"results":"64","hashOfConfig":"59"},{"size":3138,"mtime":1608319745074,"results":"65","hashOfConfig":"59"},{"size":5660,"mtime":1608319745128,"results":"66","hashOfConfig":"59"},{"size":752,"mtime":1608319745005,"results":"67","hashOfConfig":"59"},{"size":18040,"mtime":1608319744393,"results":"68","hashOfConfig":"59"},{"size":853,"mtime":1608319744491,"results":"69","hashOfConfig":"59"},{"size":7212,"mtime":1608319744577,"results":"70","hashOfConfig":"59"},{"size":6727,"mtime":1608319846773,"results":"71","hashOfConfig":"59"},{"size":6890,"mtime":1608319744679,"results":"72","hashOfConfig":"59"},{"size":5201,"mtime":1608319744468,"results":"73","hashOfConfig":"59"},{"size":6337,"mtime":1608319808920,"results":"74","hashOfConfig":"59"},{"size":17064,"mtime":1608319744542,"results":"75","hashOfConfig":"59"},{"size":3824,"mtime":1608319744503,"results":"76","hashOfConfig":"59"},{"size":18609,"mtime":1608319744638,"results":"77","hashOfConfig":"59"},{"size":6821,"mtime":1608319745105,"results":"78","hashOfConfig":"59"},{"size":2661,"mtime":1608319744601,"results":"79","hashOfConfig":"59"},{"size":3211,"mtime":1608319744367,"results":"80","hashOfConfig":"59"},{"size":5240,"mtime":1608319745091,"results":"81","hashOfConfig":"59"},{"size":6746,"mtime":1608319745116,"results":"82","hashOfConfig":"59"},{"size":5139,"mtime":1608319744691,"results":"83","hashOfConfig":"59"},{"size":1384,"mtime":1608319745342,"results":"84","hashOfConfig":"59"},{"size":931,"mtime":1608319745373,"results":"85","hashOfConfig":"59"},{"size":1658,"mtime":1608319745266,"results":"86","hashOfConfig":"59"},{"size":3624,"mtime":1608319745232,"results":"87","hashOfConfig":"59"},{"size":14384,"mtime":1608319745217,"results":"88","hashOfConfig":"59"},{"size":5386,"mtime":1608319745289,"results":"89","hashOfConfig":"59"},{"size":4619,"mtime":1608319745278,"results":"90","hashOfConfig":"59"},{"size":10370,"mtime":1608319745361,"results":"91","hashOfConfig":"59"},{"size":8169,"mtime":1608319744783,"results":"92","hashOfConfig":"59"},{"size":5094,"mtime":1608319744860,"results":"93","hashOfConfig":"59"},{"size":1529,"mtime":1608319744837,"results":"94","hashOfConfig":"59"},{"size":3318,"mtime":1608319744589,"results":"95","hashOfConfig":"59"},{"size":1760,"mtime":1608319744663,"results":"96","hashOfConfig":"59"},{"size":2690,"mtime":1608319744444,"results":"97","hashOfConfig":"59"},{"size":1509,"mtime":1608319744480,"results":"98","hashOfConfig":"59"},{"size":474,"mtime":1608319744408,"results":"99","hashOfConfig":"59"},{"size":16300,"mtime":1608319745051,"results":"100","hashOfConfig":"59"},{"size":3946,"mtime":1608319744887,"results":"101","hashOfConfig":"59"},{"size":10391,"mtime":1608319744805,"results":"102","hashOfConfig":"59"},{"size":3197,"mtime":1608319744876,"results":"103","hashOfConfig":"59"},{"size":10237,"mtime":1608319744825,"results":"104","hashOfConfig":"59"},{"size":1018,"mtime":1608319744319,"results":"105","hashOfConfig":"59"},{"size":2312,"mtime":1608319744754,"results":"106","hashOfConfig":"59"},{"size":4078,"mtime":1608319745255,"results":"107","hashOfConfig":"59"},{"size":3502,"mtime":1608319745244,"results":"108","hashOfConfig":"59"},{"size":5295,"mtime":1608319744848,"results":"109","hashOfConfig":"59"},{"size":2642,"mtime":1608319745330,"results":"110","hashOfConfig":"59"},{"size":5120,"mtime":1608319744296,"results":"111","hashOfConfig":"59"},{"size":1643,"mtime":1608319745319,"results":"112","hashOfConfig":"59"},{"size":3041,"mtime":1608319744766,"results":"113","hashOfConfig":"59"},{"size":4965,"mtime":1608319744331,"results":"114","hashOfConfig":"59"},{"size":6984,"mtime":1608319744307,"results":"115","hashOfConfig":"59"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vv9d5d",{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"122"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"122"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"122"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"122"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"122"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"122"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"122"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"122"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"122"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"122"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"122"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"122"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"122"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"122"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"122"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"122"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"122"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"248","usedDeprecatedRules":"122"},"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\index.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\reportWebVitals.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\App.js",[],["249","250"],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\serviceWorker.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\game.js",["251"],"// game routes\nimport React, {Component, Fragment} from 'react';\nimport {Route, Switch} from 'react-router-dom'\n\nimport { Wallet } from './wallet/wallet';\nimport { SendCard } from './common/sendcard';\nimport { CardDetail } from './wallet/carddetail';\nimport { SendIgnis } from './common/sendmoney';\nimport { SendToken} from './common/sendtoken';\nimport { ShowQrCode } from './wallet/showqrcode';\nimport { BuyPack, BuyPackCurrency } from './wallet/buypack';\nimport { UserDisplay } from './common/user';\nimport { FundAccount } from './wallet/fundaccount';\nimport { Jackpot } from './wallet/jackpot';\nimport { Exchange } from './exchange/exchange';\nimport { CancelAskOrder, CancelBidOrder } from './exchange/cancel';\nimport { PlaceOrder } from './exchange/cardorder';\nimport { TxHistory } from './common/txhistory';\nimport { COLLECTIONACCOUNT, NODEURL, CURRENCY, NQTDIVIDER } from './common/constants';\nimport { getBlockchainTransactions, getUnconfirmedTransactions, getTrades } from './common/ardorinterface';\nimport { fetchCards } from './common/common';\nimport { Faq } from './common/faq';\n\nimport NavBar from './common/navigation';\nimport {getIgnisBalance, getAccountCurrencies, getAccount} from './common/ardorinterface';\n\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseOutlined from '@material-ui/icons/CloseOutlined';\nimport { withSnackbar } from 'notistack';\nimport { updateTimestamp, getTimestamp, getBackupDone } from './login/storage';\nimport { MonsterPage } from './wallet/monsterpage';\nimport { TarascaPage } from './wallet/tarasca';\n\n\n\nclass GameRoutes extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      blockchainTransactions:[],\n      unconfirmedTransactions:[],\n      trades:[],\n      collectionCards:[],\n      showAllCards:false,\n      userIsNew:false,\n      collectionCompleted:{complete:false,missingAssets:[],blockedAssets:[]},\n      wallet: {unconfirmedBalanceNQT:0, balanceNQT:0},\n      walletCurrency: {unconfirmedUnitsQNT:0, unitsQNT:0},\n      lastUpdate:{newTx:0,newTrades:0,timestamp:undefined,timestampTrades:undefined}\n    }\n    this.toggleShowAllCards = this.toggleShowAllCards.bind(this);    \n    this.snackIt = this.snackIt.bind(this);\n    this.confirmedSnack = this.confirmedSnack.bind(this);\n    this.refresh = this.refresh.bind(this);\n    this.snackMissedTx = this.snackMissedTx.bind(this);\n    this.resetNewTx = this.resetNewTx.bind(this);\n    this.resetNewTrades = this.resetNewTrades.bind(this);\n    this.snackTrades = this.snackTrades.bind(this);\n    this.snackBackup = this.snackBackup.bind(this);\n  }\n\n  toggleShowAllCards(){\n    console.log(\"toggleShowAllCards, current setting: \"+this.state.showAllCards);\n    this.setState({showAllCards:!this.state.showAllCards});\n  }\n\n  resetNewTx(){\n    let lastUpdate = this.state.lastUpdate;\n    lastUpdate.newTx = 0;\n    lastUpdate.timestamp = this.state.blockchainTransactions[0].blockTimestamp;\n    this.setState({lastUpdate:lastUpdate});\n  }\n\n  resetNewTrades(){\n    let lastUpdate = this.state.lastUpdate;\n    lastUpdate.newTrades = 0;\n    lastUpdate.timestampTrades = this.state.trades[0].timestamp;\n    this.setState({lastUpdate:lastUpdate});\n  }\n\n  refresh(){\n    var self= this;\n    getAccount(self.props.nodeurl,self.props.user.accountRs)\n    .then((response)=>{\n      if (response.data.errorCode ===4 || response.data.errorCode ===5){\n        self.setState({userIsNew:true})\n      }\n    })\n    \n    getIgnisBalance(self.props.nodeurl,self.props.user.accountRs)\n    .then(function(response){\n        self.setState({wallet:response})\n    });\n  \n    getAccountCurrencies(self.props.nodeurl,self.props.user.accountRs,CURRENCY)\n    .then(function(response){\n      //console.log(response)\n      if (Object.keys(response).length>0){\n        self.setState({walletCurrency:response})\n      }\n    });\n\n    getBlockchainTransactions(NODEURL,2,self.props.user.accountRs,true)\n    .then((response)=>{\n        if (self.state.blockchainTransactions && self.state.blockchainTransactions.length) {\n            let diff = response.transactions.filter((tx)=>(!self.state.blockchainTransactions.find((btx)=>(btx.fullHash === tx.fullHash))));\n            //console.log(diff);\n            this.confirmedSnack(diff);\n        }\n        if (response.transactions && response.transactions.length > 0){\n          updateTimestamp(self.props.user.name,response.transactions[0].blockTimestamp);\n        }\n        self.setState({blockchainTransactions:response.transactions});\n    })\n\n    getUnconfirmedTransactions(NODEURL,2,self.props.user.accountRs)\n    .then((response)=>{\n        if (self.state.unconfirmedTransactions && self.state.blockchainTransactions.length) {\n          let diff = response.unconfirmedTransactions.filter((tx)=>(!self.state.unconfirmedTransactions.find((btx)=>(btx.fullHash === tx.fullHash))));\n          //console.log(response.unconfirmedTransactions);\n          //console.log(diff);\n          this.snackIt(diff);\n        }\n        //this.snackIt(response.unconfirmedTransactions);\n        self.setState({unconfirmedTransactions:response.unconfirmedTransactions});\n    })\n\n    getTrades(NODEURL,2,self.props.user.accountRs)\n    .then((response) => {\n      //console.log(response);\n      if (self.state.trades && self.state.trades.length) {\n        let diff = response.trades.filter((rtrade)=>{\n          return !self.state.trades.find((btr)=>(\n              (btr.askOrderFullHash === rtrade.askOrderFullHash) && (btr.bidOrderFullHash === rtrade.bidOrderFullHash)\n            ))\n        });\n        //console.log(diff);\n        this.snackTrades(diff);\n    }\n    if (response.trades && response.trades.length > 0){\n      updateTimestamp(self.props.user.name,response.trades[0].timestamp);\n    }\n    self.setState({trades:response.trades});\n    })\n  }\n\n  snackActionTrade = (key) => (\n    <Fragment>\n      <Button onClick={()=>{\n          this.props.history.push('/game/exchange');\n          this.props.closeSnackbar(key);\n        }}\n      >\n        {\"show\"}\n      </Button>\n      <IconButton onClick={() => { this.props.closeSnackbar(key) }}>\n        <CloseOutlined/>      \n      </IconButton>\n    </Fragment>\n  );\n\n\n  snackActionShow = (key) => (\n    <Fragment>\n      <Button onClick={()=>{\n          this.props.history.push('/game/history');\n          this.props.closeSnackbar(key);\n        }}\n      >\n        {\"show\"}\n      </Button>\n      <IconButton onClick={() => { this.props.closeSnackbar(key) }}>\n        <CloseOutlined/>      \n      </IconButton>\n    </Fragment>\n  );\n\n  snackTrades(trades){\n    var self = this;\n    trades.forEach((trade,index) => {\n      console.log(trade);\n      const card = self.state.collectionCards.find((card)=>(card.asset === trade.asset))\n      const what = (trade.buyerRS == self.props.user.accountRs) ? \"Bought\" : \"Sold\";\n      this.props.enqueueSnackbar(what+' '+trade.quantityQNT+' '+card.name,{\n        key:trade.fullHash,\n        action:this.snackAction,\n        preventDuplicate: true,\n        variant:'info'});               \n      });\n  }\n\n  snackMissedTx(){\n    var self = this;\n    // know height of last update AND HANDLE UNDEFINED\n    const timestamp = getTimestamp(self.props.user.name);\n    // self.setState({\n    //   lastUpdate:{\n    //     newTx:self.state.lastUpdate.newTx,\n    //     newTrades:self.state.lastUpdate.newTrades,\n    //     timestamp:timestamp,\n    //     timestampTrades:timestamp\n    //   }\n    // });\n    if (timestamp) { // does this handle undefined?\n      console.log(\"checking for past TX from t:\" + timestamp+1);\n      getBlockchainTransactions(NODEURL,2,self.props.user.accountRs,true,timestamp+1)\n      .then((response) => {\n        //console.log(response);\n        if (response.transactions && response.transactions.length){\n          let numTx = response.transactions.length;\n          let message = numTx  + \" transaction(s) occurred while you were away.\";\n          let lastUpdate = self.state.lastUpdate;\n          lastUpdate.newTx = numTx;\n          self.setState({lastUpdate:lastUpdate});\n          setTimeout(()=>{self.props.enqueueSnackbar(message,{\n            action:this.snackActionShow,\n            variant:'warning'})\n          }, 1000); \n        }\n        else {\n          console.log(\"no tx found\");\n        }\n      });\n      getTrades(NODEURL,2,self.props.user.accountRs,timestamp+1)\n      .then((response)=> {\n        if (response.trades && response.trades.length){\n          let numTrades = response.trades.length;\n          let message = numTrades  + \" card trade(s) occurred while you were away.\";\n          let lastUpdate = self.state.lastUpdate;\n          lastUpdate.newTrades = numTrades\n          self.setState({lastUpdate:lastUpdate});\n          setTimeout(()=>{self.props.enqueueSnackbar(message,{\n            action:this.snackActionTrade,\n            variant:'warning'})\n          }, 1000); \n        }\n        else {\n          console.log(\"no trades found\");\n        }\n      })\n    }\n    else {\n      console.log(\"timestamp not stored yet?\");\n    }\n  }\n\n  snackActionBackup = (key) => (\n    <Fragment>\n      <Button onClick={()=>{\n          this.props.history.push('/game/settings');\n          this.props.closeSnackbar(key);\n        }}\n      >\n        {\"do it now\"}\n      </Button>\n      <IconButton onClick={() => { this.props.closeSnackbar(key) }}>\n        <CloseOutlined/>      \n      </IconButton>\n    </Fragment>\n  );\n\n\n  snackBackup(){\n    var self = this;\n    const backupDone = getBackupDone(self.props.user.name);\n    let message = \"Please back-up your passphrase\"\n    if (!backupDone){\n      setTimeout(()=>{self.props.enqueueSnackbar(message,{\n        action:this.snackActionBackup,\n        variant:'warning'})\n      }, 500); \n    }\n  }\n\n  componentDidMount(){\n    var self = this;\n    fetchCards(NODEURL,self.props.user.accountRs,COLLECTIONACCOUNT,false)\n    .then((response) => {\n      self.setState({collectionCards:response});\n    })\n    this.snackMissedTx();\n    this.snackBackup();\n    this.refresh();\n    console.log(\"GameRoutes: start refresh\");\n    this.timer = setInterval(this.refresh,5000);\n  }\n\n  componentWillUnmount(){\n      console.log(\"GameRoutes: stop refresh\");\n      clearInterval(this.timer);    \n  }\n\n\n  snackAction = (key) => (\n    <Fragment>\n      <IconButton onClick={() => { this.props.closeSnackbar(key) }}>\n        <CloseOutlined/>      \n      </IconButton>\n    </Fragment>\n  );\n  \n\n  snackIt(transactions){\n    var self = this;\n    transactions.forEach((tx,index) => {\n      //console.log(tx);\n      if (tx.type === 2 & tx.subtype === 1 & tx.recipientRS === self.props.user.accountRs){\n        //Asset Transfer \n        //console.log(tx);\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n            this.props.enqueueSnackbar('Confirming: Received card: '+card.name,{\n              key:tx.fullHash+\"un\",\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n               \n      }\n      else if (tx.type === 2 & tx.subtype === 1 & tx.senderRS === self.props.user.accountRs){\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n            this.props.enqueueSnackbar('Confirming: Sent card: '+card.name,{\n              key:tx.fullHash+\"un\",\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 2) {\n        // place ask order\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.enqueueSnackbar('Confirming: Offer for card (ask order): '+card.name,{\n              key:tx.fullHash+\"un\",\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 3) {\n        // place bid order\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.enqueueSnackbar('Confirming: Bid for card (bid order): '+card.name,{\n              key:tx.fullHash+\"un\",\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 4) {\n        // cancel ask order\n        //Asset Transfer\n        //const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        //if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirming: Cancellation for Offer (ask order)',{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        //}\n      }\n      else if (tx.type === 2 & tx.subtype === 5) {\n        // cancel bid order\n        //Asset Transfer\n        //const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        //if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirming: Cancellation for Bid',{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        //}\n      }\n      else if (tx.type === 5 & tx.subtype === 3){\n        // Currency Transfer \n        if (tx.senderRS === self.props.user.accountRs){\n          //outgoing\n          this.props.enqueueSnackbar(\"Confirming: Sent \"+tx.attachment.unitsQNT+\" GIFTZ\",{\n            key:tx.fullHash+\"un\",\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n        else {\n          // incoming\n          this.props.enqueueSnackbar(\"Confirming: Received \"+tx.attachment.unitsQNT+\" GIFTZ\",{\n            key:tx.fullHash+\"un\",\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n      }\n      else if (tx.type === 0 & tx.subtype === 0){\n        // Ordinary Payment (IGNIS TX)\n        if (tx.senderRS === self.props.user.accountRs){\n          //outgoing\n          this.props.enqueueSnackbar(\"Confirming: Sent \"+tx.amountNQT/NQTDIVIDER+\" Ignis\",{\n            key:tx.fullHash+\"un\",\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n        else {\n          // incoming\n          this.props.enqueueSnackbar(\"Confirming: Received \"+tx.amountNQT/NQTDIVIDER+\" Ignis\",{\n            key:tx.fullHash+\"un\",\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});              \n        }\n      }\n      \n    });        \n  }\n  \n  confirmedSnack(transactions){\n    var self = this;\n    transactions.forEach((tx,index) => {\n      //console.log(tx);\n      if (tx.type === 2 & tx.subtype === 1 & tx.recipientRS === self.props.user.accountRs){\n        //Asset Transfer \n        //console.log(tx);\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirmed: Received card: '+card.name,{\n            key:tx.fullHash,\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n               \n      }\n      else if (tx.type === 2 & tx.subtype === 1 & tx.senderRS === self.props.user.accountRs){\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirmed: Sent card: '+card.name,{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 2) {\n        // place ask order\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirmed: Offer for card (ask order): '+card.name,{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 3) {\n        // place bid order\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirmed: Bid for card (bid order): '+card.name,{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 4) {\n        // cancel ask order\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirmed: Cancellation for card offer: '+card.name,{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 2 & tx.subtype === 5) {\n        // cancel bid order\n        //Asset Transfer\n        const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n        if (card) {\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar('Confirmed: Cancellation for bid: '+card.name,{\n              key:tx.fullHash,\n              action:this.snackAction,\n              preventDuplicate: true,\n              variant:'info'});\n        }\n      }\n      else if (tx.type === 5 & tx.subtype === 3){\n        // Currency Transfer \n        if (tx.senderRS === self.props.user.accountRs){\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          //outgoing\n          this.props.enqueueSnackbar(\"Confirmed: Sent \"+tx.attachment.unitsQNT+\" GIFTZ\",{\n            key:tx.fullHash,\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n        else {\n          // incoming\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar(\"Confirmed: Received \"+tx.attachment.unitsQNT+\" GIFTZ\",{\n            key:tx.fullHash,\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n      }\n      else if (tx.type === 0 & tx.subtype === 0){\n        // Ordinary Payment (IGNIS TX)\n        if (tx.senderRS === self.props.user.accountRs){\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          //outgoing\n          this.props.enqueueSnackbar(\"Confirmed: Sent \"+tx.amountNQT/NQTDIVIDER+\" Ignis\",{\n            key:tx.fullHash,\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});\n        }\n        else {\n          // incoming\n          this.props.closeSnackbar(tx.fullHash+\"un\");\n          this.props.enqueueSnackbar(\"Confirmed: Received \"+tx.amountNQT/NQTDIVIDER+\" Ignis\",{\n            key:tx.fullHash,\n            action:this.snackAction,\n            preventDuplicate: true,\n            variant:'info'});              \n        }\n      }\n    });      \n  }\n\n  render() {\n    //const props = this.props;\n    //const state = this.state;\n    const myprops = { // this \"filters out\" all required props that will be fed to the pages below. The Route props will be added\n      user:this.props.user,\n      userIsNew:this.state.userIsNew,\n      nodeurl:this.props.nodeurl,\n      collectionAccount:this.props.collectionAccount,\n      epoch_beginning:this.props.epoch_beginning,\n      blockchainStatus:this.props.blockchainStatus,\n      // added some states to the myprops\n      showAllCards:this.state.showAllCards,\n      toggleShowAllCards:this.toggleShowAllCards,\n      wallet:this.state.wallet,\n      walletCurrency:this.state.walletCurrency,\n      blockchainTransactions:this.state.blockchainTransactions,\n      unconfirmedTransactions:this.state.unconfirmedTransactions,\n      collectionCards:this.state.collectionCards,\n      lastUpdate:this.state.lastUpdate,\n      trades:this.state.trades\n    };\n    return(\n      <div className=\"App\">\n        <NavBar {...this.props} {...this.state} toggleShowAllCards={this.toggleShowAllCards}/>\n        <main>\n            <div className=\"App\" style={{display:\"inline-block\", width:\"100%\"}}>                \n                <Switch>\n                  <Route exact path=\"/game/\" render={(props)=>(<Wallet {...props} {...myprops}/>)} />\n                  <Route path=\"/game/send/:asset\" render={(props)=>(<SendCard {...props} {...myprops}/>)} />\n                  <Route path=\"/game/card/:asset\" render={(props)=>(<CardDetail {...props}  {...myprops}/>)} />\n                  <Route path=\"/game/sendignis\" render={(props)=>(<SendIgnis {...props} {...myprops}/>)} />\n                  <Route path=\"/game/sendcurrency\" render={(props)=>(<SendToken {...props} {...myprops}/>)} />\n                  <Route path=\"/game/receive\" render={(props)=>(<ShowQrCode {...props} {...myprops}/>)} />\n                  <Route path=\"/game/buypack\" render={(props)=>(<BuyPack {...props} {...myprops}/>)} />\n                  <Route path=\"/game/buypackcur\" render={(props)=>(<BuyPackCurrency {...props} {...myprops}/>)} />\n                  <Route path=\"/game/settings\" render={(props)=>(<UserDisplay {...props} {...myprops}/>)} />\n                  <Route path=\"/game/fundaccount\" render={(props)=>(<FundAccount {...props} {...myprops}/>)} />\n                  <Route path=\"/game/jackpot\" render={(props)=>(<Jackpot {...props} {...myprops}/>)} />\n                  <Route path=\"/game/tarasca\" render={(props)=>(<TarascaPage {...props} {...myprops}/>)} />\n                  <Route path=\"/game/history\" render={(props)=>(<TxHistory {...props} {...myprops} resetNewTx={this.resetNewTx}/>)} />\n                  <Route path=\"/game/faq\" render={(props)=>(<Faq {...props} {...myprops}/>)} />\n                  <Route path=\"/game/exchange\" render={(props) => (<Exchange {...props} {...myprops} resetNewTrades={this.resetNewTrades}/>)} />\n                  <Route path=\"/game/place/:type/:asset\" render={(props)=>(<PlaceOrder {...props}  {...myprops}/>) } />\n                  <Route path=\"/game/card/:asset\" render={(props)=>(<PlaceOrder {...props}  {...myprops}/>) } />\n                  <Route path=\"/game/learnmore/:asset\" render={(props)=>(<MonsterPage {...props}  {...myprops}/>) } />\n                  <Route path=\"/game/cancel/ask/:order\" render={(props)=>(<CancelAskOrder {...props}  {...myprops}/>) } />\n                  <Route path=\"/game/cancel/bid/:order\" render={(props)=>(<CancelBidOrder {...props}  {...myprops}/>) } />\n                </Switch>                               \n            </div>\n        </main>\n    </div>\n    );\n  }\n}\n\nexport default withSnackbar(GameRoutes);\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\storage.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\login.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\scanner.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\auth.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\ardorinterface.js",["252"],"// Ardor Interface\nimport axios from 'axios';\nimport qs from 'qs';\nimport {NQTDIVIDER} from './constants';\nimport {secretPhraseToPublicKey,signTransactionBytes} from 'ardorjs';\n\nconst config = {\n  headers: {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  }\n};\n\n//building the logo url\nexport function getImageURL(nodeurl,fullHash) {\n  const params = new URLSearchParams();\n  const queryparams = {\n    requestType:\"downloadTaggedData\",\n    chain:\"IGNIS\",\n    transactionFullHash:fullHash,\n    retrieve:true\n  };\n  for (const [key, val] of Object.entries(queryparams)) {\n      params.append(key, val);\n  }\n  const url = nodeurl+'?'+params.toString();\n  return url;\n}\n\n\nfunction getTransactionBytes(nodeurl,query) {\n  console.log(nodeurl,query);\n  return axios.post(nodeurl, qs.stringify(query), config).then(function(response) {\n    return response.data;\n  });\n}\n\n\n//Account balance\nexport function getIgnisBalance(nodeurl,account){\n  return axios.get(nodeurl,{\n    params: {\n      requestType:\"getBalance\",\n      chain:\"IGNIS\",\n      account:account\n      }\n  })\n  .then(function (response) {\n    return response.data;\n  });\n}\n\nexport function getAccountCurrentAskOrders(nodeurl,account) {\n  return axios.get(nodeurl, {\n        params: {\n          requestType:\"getAccountCurrentAskOrders\",\n          chain:\"IGNIS\",\n          account:account\n          }\n      })\n      .then(function(response) {\n        return response.data;\n      });\n  }\n\nexport function getAccountCurrentBidOrders(nodeurl,account) {\n  return axios.get(nodeurl, {\n        params: {\n          requestType:\"getAccountCurrentBidOrders\",\n          chain:\"IGNIS\",\n          account:account\n          }\n      })\n      .then(function(response) {\n        return response.data;\n      });\n  }\n\nexport function getAskOrders(nodeurl,asset) {\n  return axios.get(nodeurl, {\n        params: {\n          requestType:\"getAskOrders\",\n          chain:\"IGNIS\",\n          asset:asset,\n          }\n      })\n      .then(function(response) {\n        return response.data;\n      });\n  }\n\n\nexport function getBidOrders(nodeurl,asset) {\n  return axios.get(nodeurl, {\n        params: {\n          requestType:\"getBidOrders\",\n          chain:\"IGNIS\",\n          asset:asset,\n          }\n      })\n      .then(function(response) {\n        return response.data;\n      });\n  }\n\nexport function getAskOrder(nodeurl,order) {\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getAskOrder\",\n      chain:\"IGNIS\",\n      order:order,\n      }\n  })\n  .then(function(response) {\n    return response.data;\n  });\n}\n\nexport function getBidOrder(nodeurl,order) {\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getBidOrder\",\n      chain:\"IGNIS\",\n      order:order,\n      }\n  })\n  .then(function(response) {\n    return response.data;\n  });\n}\n\nexport function getAssetsByIssuer(nodeurl,account) {\n  return axios.get(nodeurl, {\n        params: {\n          requestType:\"getAssetsByIssuer\",\n          account:account\n          }\n      })\n      .then(function(response) {\n        return response.data.assets[0];\n      });\n  }\n\n\nexport function getAccount(nodeurl,account) {\n  return axios.get(nodeurl, {\n    params : {\n      requestType:\"getAccount\",\n      account:account\n    }\n  })\n  .then(function(response) {\n    return response;\n  })\n}\n\nexport function getAssets(nodeurl,assets) {\n  return axios.get(nodeurl, {\n        params: {\n          requestType:\"getAssets\",\n          assets:assets\n          }\n      })\n      .then(function(response) {\n        //console.log(response);\n        return response.data.assets[0];\n      });\n  }\n\nexport function getAccountAssets(nodeurl,account) {\n  return axios.get(nodeurl, {\n      params: {\n        requestType:\"getAccountAssets\",\n        includeAssetInfo:false,\n        account:account\n        }\n    })\n    .then(function(response) {\n      return response.data.accountAssets;\n    })\n  }\n\nexport function getAccountCurrencies(nodeurl,account,currency) {\n  return axios.get(nodeurl, {\n      params: {\n        requestType:\"getAccountCurrencies\",\n        account:account,\n        currency:currency\n        }\n    })\n    .then(function(response) {\n      return response.data;\n    })\n  }\n\nfunction sendIgnis(nodeurl, amountNQT, recipient, passPhrase, message, messagePrunable=true){\n  console.log('sendIgnis()');\n  let recipientNew = false;\n  getAccount(nodeurl,recipient).then(\n    function(response) {\n      if (response.data.errorCode === 5 || response.data.errorCode === 4) recipientNew = true;\n    }\n  )\n  \n  const publicKey = secretPhraseToPublicKey(passPhrase);\n  var query = {\n    chain:2,\n    recipient:recipient,\n    amountNQT:amountNQT,\n    feeNQT: -1,\n    feeRateNQTPerFXT: -1,\n    deadline:15,\n    broadcast:false,\n    publicKey:publicKey,\n    message:message,\n    messageIsPrunable:messagePrunable\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  \n  console.log('get minimumFee');\n  const url_sendmoney = nodeurl+'?requestType=sendMoney';\n  const url_broadcast = nodeurl+'?requestType=broadcastTransaction';\n  return axios.post(url_sendmoney, qs.stringify(query), config)\n          .then(function(response) {\n            console.log(response);\n            if (recipientNew) {query.feeNQT = 3.2*NQTDIVIDER;}\n            else   {query.feeNQT = response.data.minimumFeeFQT *response.data.bundlerRateNQTPerFXT*0.00000001;}\n\n            query.broadcast = false;\n            console.log('get transactionBytes');\n            return axios.post(url_sendmoney, qs.stringify(query), config)\n                .then(function(response){\n                  const signed = signTransactionBytes(response.data.unsignedTransactionBytes, passPhrase);\n                  var txdata;\n                  if (message !==\"\"){\n                    let txattachment = JSON.stringify(response.data.transactionJSON.attachment);\n                    txdata = {transactionBytes:signed, prunableAttachmentJSON:txattachment};\n                  }\n                  else {\n                    txdata = {transactionBytes:signed};\n                  }\n                  console.log(\"sending signed transaction\");\n                  return axios.post(url_broadcast, qs.stringify(txdata), config)\n                        .then(function(response){\n                          return response;\n                        })\n                })\n          });\n  }\n\n\nexport function cancelAskOrder(nodeurl, chain, order, passPhrase){\n  console.log('cancelAskOrder()');\n  const publicKey = secretPhraseToPublicKey(passPhrase);\n  var query = {\n    chain:2,\n    order:order,\n    feeNQT: -1,\n    feeRateNQTPerFXT: -1,\n    deadline:15,\n    broadcast:false,\n    publicKey:publicKey,\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  console.log('get minimumFee');\n  const url_sendmoney = nodeurl+'?requestType=cancelAskOrder';\n  const url_broadcast = nodeurl+'?requestType=broadcastTransaction';\n  return axios.post(url_sendmoney, qs.stringify(query), config)\n          .then(function(response) {\n            query.feeNQT = response.data.minimumFeeFQT*response.data.bundlerRateNQTPerFXT*0.00000001;\n            query.broadcast = false;\n            console.log('get transactionBytes');\n            return axios.post(url_sendmoney, qs.stringify(query), config)\n                .then(function(response){\n                  const signed = signTransactionBytes(response.data.unsignedTransactionBytes, passPhrase);\n                  var txdata;\n                  txdata = {transactionBytes:signed};\n                  console.log(\"sending signed transaction\");\n                  return axios.post(url_broadcast, qs.stringify(txdata), config)\n                        .then(function(response){\n                          return response;\n                        })\n                })\n          });\n}\n\n\nexport function cancelBidOrder(nodeurl, chain, order, passPhrase){\n  console.log('cancelBidOrder()');\n  const publicKey = secretPhraseToPublicKey(passPhrase);\n  var query = {\n    chain:2,\n    order:order,\n    feeNQT: -1,\n    feeRateNQTPerFXT: -1,\n    deadline:15,\n    broadcast:false,\n    publicKey:publicKey,\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n\n  console.log('get minimumFee');\n  const url_sendmoney = nodeurl+'?requestType=cancelBidOrder';\n  const url_broadcast = nodeurl+'?requestType=broadcastTransaction';\n  return axios.post(url_sendmoney, qs.stringify(query), config)\n          .then(function(response) {\n            query.feeNQT = response.data.minimumFeeFQT*response.data.bundlerRateNQTPerFXT*0.00000001;\n            query.broadcast = false;\n            console.log('get transactionBytes');\n            return axios.post(url_sendmoney, qs.stringify(query), config)\n                .then(function(response){\n                  const signed = signTransactionBytes(response.data.unsignedTransactionBytes, passPhrase);\n                  var txdata;\n                  txdata = {transactionBytes:signed};\n                  console.log(\"sending signed transaction\");\n                  return axios.post(url_broadcast, qs.stringify(txdata), config)\n                        .then(function(response){\n                          return response;\n                        })\n                })\n          });\n}\n\n\nexport function getTrades(nodeurl,chain,account,timestamp){\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getTrades\",\n      chain:chain,\n      account:account,\n      timestamp:timestamp,\n      includeAssetInfo:true\n    }\n  })\n  .then(function(response) {\n    return response.data;\n  })\n}\n\nfunction transferCurrency(nodeurl, currency, unitsQNT, recipient, passPhrase, message=\"\", messagePrunable=true){\n  console.log('transferCurrency()');\n  let recipientNew = false;\n  getAccount(nodeurl,recipient).then(\n    function(response) {\n      if (response.data.errorCode === 5 || response.data.errorCode === 4) recipientNew = true;\n    }\n  )\n  \n  const publicKey = secretPhraseToPublicKey(passPhrase);\n  var query = {\n    chain:2,\n    recipient:recipient,\n    currency:currency,\n    unitsQNT:unitsQNT,\n    feeNQT:-1,\n    feeRateNQTPerFXT: -1,\n    deadline:15,\n    broadcast:false,\n    publicKey:publicKey,\n    message:message,\n    messageIsPrunable:messagePrunable\n  };\n  const config = {\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    }\n  };\n  console.log('get minimumFee');\n  const url_sendmoney = nodeurl+'?requestType=transferCurrency';\n  const url_broadcast = nodeurl+'?requestType=broadcastTransaction';\n  return axios.post(url_sendmoney, qs.stringify(query), config)\n          .then(function(response) {\n            console.log(response);\n            if (recipientNew) \n              {query.feeNQT = 3.2*NQTDIVIDER;}\n            else   \n              {query.feeNQT = response.data.minimumFeeFQT*response.data.bundlerRateNQTPerFXT*0.00000001;}\n            \n            query.broadcast = false;\n            console.log('get transactionBytes');\n            return axios.post(url_sendmoney, qs.stringify(query), config)\n                .then(function(response){\n                  const signed = signTransactionBytes(response.data.unsignedTransactionBytes, passPhrase);\n                  var txdata;\n                  if (message !==\"\"){\n                    let txattachment = JSON.stringify(response.data.transactionJSON.attachment);\n                    txdata = {transactionBytes:signed, prunableAttachmentJSON:txattachment};\n                  }\n                  else {\n                    txdata = {transactionBytes:signed};\n                  }\n                  console.log(\"sending signed transaction\");\n                  return axios.post(url_broadcast, qs.stringify(txdata), config)\n                        .then(function(response){\n                          return response;\n                        })\n                })\n          });\n  }\n\n  function transferCurrencyZeroFee(nodeurl, currency, unitsQNT, recipient, passPhrase, message=\"\", messagePrunable=true){\n    console.log('transferCurrencyZeroFee()');\n    let recipientNew = false;\n    getAccount(nodeurl,recipient).then(\n      function(response) {\n        if (response.data.errorCode === 5 || response.data.errorCode === 4) recipientNew = true;\n      }\n    )\n    \n    const publicKey = secretPhraseToPublicKey(passPhrase);\n    var query = {\n      chain:2,\n      recipient:recipient,\n      currency:currency,\n      unitsQNT:unitsQNT,\n      feeNQT:0,\n      feeRateNQTPerFXT: 0,\n      deadline:15,\n      broadcast:false,\n      publicKey:publicKey,\n      message:message,\n      messageIsPrunable:messagePrunable\n    };\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    console.log('get minimumFee');\n    const url_sendmoney = nodeurl+'?requestType=transferCurrency';\n    const url_broadcast = nodeurl+'?requestType=broadcastTransaction';\n    return axios.post(url_sendmoney, qs.stringify(query), config)\n            .then(function(response) {\n              console.log(response);\n              query.feeNQT = 0;\n              \n              query.broadcast = false;\n              console.log('get transactionBytes');\n              return axios.post(url_sendmoney, qs.stringify(query), config)\n                  .then(function(response){\n                    const signed = signTransactionBytes(response.data.unsignedTransactionBytes, passPhrase);\n                    var txdata;\n                    if (message !==\"\"){\n                      let txattachment = JSON.stringify(response.data.transactionJSON.attachment);\n                      txdata = {transactionBytes:signed, prunableAttachmentJSON:txattachment};\n                    }\n                    else {\n                      txdata = {transactionBytes:signed};\n                    }\n                    console.log(\"sending signed transaction\");\n                    return axios.post(url_broadcast, qs.stringify(txdata), config)\n                          .then(function(response){\n                            return response;\n                          })\n                  })\n            });\n    }\n\nfunction getAsset(nodeurl,asset){\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getAsset\",\n      asset:asset\n      }\n  })\n  .then(function(response) {\n    return response;\n  })\n}\n\nfunction getCurrency(nodeurl,currency){\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getCurrency\",\n      currency:currency\n      }\n  })\n  .then(function(response) {\n    return response;\n  })\n}\n\nfunction transferAsset(nodeurl,asset,quantityQNT,recipient,passPhrase,message='',messagePrunable=true) {\n    console.log('transferAsset(): '+asset);\n    let recipientNew = false;\n    getAccount(nodeurl,recipient).then(\n    function(response) {\n      if (response.data.errorCode === 5 || response.data.errorCode === 4) recipientNew = true;\n    }\n  )\n    console.log('get publicKey');\n    const publicKey = secretPhraseToPublicKey(passPhrase);\n\n    var query = {\n      chain:2,\n      recipient:recipient,\n      quantityQNT:quantityQNT,\n      asset:asset,\n      feeNQT:-1,\n      feeRateNQTPerFXT: -1,\n      deadline:15,\n      broadcast:false,\n      publicKey:publicKey,\n      message:message,\n      messageIsPrunable:messagePrunable\n    };\n    const config = {\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    console.log('get minimumFee');\n    const url_tx = nodeurl+'?requestType=transferAsset';\n    const url_broadcast = nodeurl+'?requestType=broadcastTransaction';\n    return axios.post(url_tx, qs.stringify(query), config)\n        .then(function(response) {\n          if (recipientNew) {query.feeNQT = 3.2*NQTDIVIDER;}\n          else   {query.feeNQT = response.data.minimumFeeFQT*response.data.bundlerRateNQTPerFXT*0.00000001;}\n          query.broadcast = false;\n          console.log('get transactionBytes');\n          return axios.post(url_tx, qs.stringify(query), config)\n            .then(function(response){\n              const signed = signTransactionBytes(response.data.unsignedTransactionBytes, passPhrase);\n              var txdata;\n              if (message !==\"\"){\n                let txattachment = JSON.stringify(response.data.transactionJSON.attachment);\n                txdata = {transactionBytes:signed, prunableAttachmentJSON:txattachment};\n              }\n              else {\n                txdata = {transactionBytes:signed};\n              }\n              console.log(\"sending signed transaction\");\n              return axios.post(url_broadcast, qs.stringify(txdata), config)\n                  .then(function(response){\n                    return response;\n                });\n          });\n    });\n}\n\nfunction getBlockchainTransactions(nodeurl,chain,account,executedOnly,timestamp,lastIndex) {\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getBlockchainTransactions\",\n      chain:chain,\n      account:account,\n      executedOnly:executedOnly,\n      timestamp:timestamp,\n      lastIndex:lastIndex\n    }\n  })\n  .then(function(response) {\n    return response.data;\n  })\n}\n\nfunction getUnconfirmedTransactions(nodeurl,chain,account,type,subtype) {\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getUnconfirmedTransactions\",\n      chain:chain,\n      account:account,\n      type:type,\n      subtype:subtype\n    }\n  })\n  .then(function(response) {\n    return response.data;\n  })\n}\n\nfunction getConstants(nodeurl){\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getConstants\"\n    }\n  })\n  .then(function(response) {\n    return response;\n  })\n}\n\nfunction getBlockchainStatus(nodeurl){\n  return axios.get(nodeurl, {\n    params: {\n      requestType:\"getBlockchainStatus\"\n      }\n  })\n  .then(function(response) {\n    return response;\n  });\n}\n\n\nexport {getTransactionBytes, getConstants, sendIgnis, transferCurrency, transferCurrencyZeroFee, transferAsset, getAsset, getCurrency,\n        getBlockchainStatus, getBlockchainTransactions, getUnconfirmedTransactions};\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\constants.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\sendtoken.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\sendcard.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\user.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\common.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\sendmoney.js",["253","254","255"],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\navigation.js",["256"],"import React, { Fragment } from 'react';\nimport {Link} from 'react-router-dom';\n\n//Material UI\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Settings from '@material-ui/icons/Settings';\nimport ExitToApp from '@material-ui/icons/ExitToApp';\nimport Star from '@material-ui/icons/Star';\nimport Title from '@material-ui/icons/Title';\nimport MoneyIcon from '@material-ui/icons/Money';\nimport Collections from '@material-ui/icons/Collections';\nimport SwapCalls from '@material-ui/icons/SwapCalls';\nimport AddCircle from '@material-ui/icons/AddCircle';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport History from '@material-ui/icons/History';\nimport Help from '@material-ui/icons/Help';\nimport logo from '../login/images/tarasca_logo01_flat-white_transparent-480px.png';\n//import CopyIcon from './images/copy.svg'\n//import SVG from 'react-inlinesvg'\n\nimport {NQTDIVIDER} from'./constants';\n\n//import classes from '*.module.scss';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { withStyles } from '@material-ui/core/styles';\n\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { Button, Badge } from '@material-ui/core';\n\nimport {round} from '../common/common';\nimport { BackButton } from './backbutton';\n\nconst drawerWidth = 280;\n\nconst styles = theme => ({\n  root: {\n    flexGrow:1,\n    marginTop:60\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n  },\n  appBar: {\n    flexGrow:1,\n    position:\"fixed\" \n  },\n  link: {\n    textDecoration: 'none'\n  }\n});\n\n\n\nclass NavBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        anchorEl:null,\n        currentName:\"ignis_balance\",\n        receiveModal:false,\n        buyModal:false,\n        navOpen:false,\n        userOpen:false,\n        drawerOpen:false\n    }\n    \n  }\n\n  handleClick = event => {\n    console.log(event.currentTarget);\n    this.setState({ anchorEl: event.currentTarget, currentName:event.currentTarget.name });\n  };\n\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n\n  render() {\n    //console.log(this.props);\n    const {wallet, walletCurrency, classes} = this.props;\n    const {anchorEl, drawerOpen, currentName} = this.state;\n    const path = this.props.location.pathname\n  \n    const drawer = (\n      <div>\n        <div/>\n        <Divider />\n        <List>\n          <Link className={classes.link} to=\"/game\">\n            <ListItem button key=\"Wallet\" onClick={()=>this.setState({drawerOpen:false})}>\n              <ListItemIcon><Collections/></ListItemIcon>\n              <ListItemText primary=\"My Cards\" />\n            </ListItem>\n          </Link>\n          <Link className={classes.link} to=\"/game/history\">\n              <ListItem button key=\"History\" onClick={()=>this.setState({drawerOpen:false})}>\n                <ListItemIcon><History /></ListItemIcon>\n                {this.props.lastUpdate.newTx !== 0 ? (\n                    <Badge badgeContent={this.props.lastUpdate.newTx} color=\"secondary\"> \n                      <ListItemText primary=\"Transaction History\" />\n                    </Badge>\n                  ):(\n                    <ListItemText primary=\"Transaction History\" />                  \n                  )\n                }\n            </ListItem>\n          </Link>\n          <Link className={classes.link} to=\"/game/exchange\">\n              <ListItem button key=\"Exchange\" onClick={()=>this.setState({drawerOpen:false})}>\n                <ListItemIcon><SwapCalls /></ListItemIcon>\n                {this.props.lastUpdate.newTrades !== 0 ? (\n                    <Badge badgeContent={this.props.lastUpdate.newTrades} color=\"secondary\"> \n                      <ListItemText primary=\"Exchange\" />\n                    </Badge>\n                  ):(\n                    <ListItemText primary=\"Exchange\" />                  \n                  )\n                }\n              </ListItem>\n          </Link>\n\n          <Link className={classes.link} to=\"/game/jackpot\">\n              <ListItem button key=\"Progress\" onClick={()=>this.setState({drawerOpen:false})}>\n              <ListItemIcon><Star /></ListItemIcon>\n              <ListItemText primary=\"Claim Jackpot\" />\n            </ListItem>\n          </Link>\n\n          <Link className={classes.link} to=\"/game/tarasca\">\n              <ListItem button key=\"Tarasca\" onClick={()=>this.setState({drawerOpen:false})}>\n              <ListItemIcon><Title /></ListItemIcon>\n              <ListItemText primary=\"Tarasca Card\" />\n            </ListItem>\n          </Link>\n        </List>\n        <Divider />\n        <List>\n          <Link className={classes.link} to=\"/game/receive\">\n            <ListItem button key=\"Receive Card\" onClick={()=>this.setState({drawerOpen:false})}>              \n                <ListItemIcon><SaveAlt /></ListItemIcon>\n                <ListItemText primary=\"Receive Card\" />              \n            </ListItem>\n          </Link>\n        </List>\n        <Divider />\n        <List>\n          <Link className={classes.link} to=\"/game/fundaccount\">\n            <ListItem button key=\"Fund Account\" onClick={()=>this.setState({drawerOpen:false})}>\n              <ListItemIcon><MoneyIcon /></ListItemIcon>\n              <ListItemText primary=\"Fund Account\" />\n            </ListItem>\n          </Link>  \n          <Link className={classes.link} to=\"/game/settings\">\n            <ListItem button key=\"Settings\" onClick={()=>this.setState({drawerOpen:false})}>\n              <ListItemIcon><Settings /></ListItemIcon>\n              <ListItemText primary=\"Settings\" />\n            </ListItem>\n          </Link>  \n          <Link className={classes.link} to=\"/game/faq\">\n            <ListItem button key=\"Faq\" onClick={()=>this.setState({drawerOpen:false})}>\n              <ListItemIcon><Help /></ListItemIcon>\n              <ListItemText primary=\"Help / FAQ\" />\n            </ListItem>\n          </Link>    \n          <Link className={classes.link} to=\"/logout\">\n            <ListItem button key=\"Logout\">\n              <ListItemIcon><ExitToApp /></ListItemIcon>\n              <ListItemText primary=\"Logout\" />\n            </ListItem>\n          </Link>  \n        </List>\n      </div>\n    );\n\n    const ignisAvailableBalance = round(Math.min(wallet.balanceNQT/NQTDIVIDER,wallet.unconfirmedBalanceNQT/NQTDIVIDER),2);\n    const fundsLocked = wallet.balanceNQT !== wallet.unconfirmedBalanceNQT;\n    const ignisTotalBalance = round(wallet.balanceNQT/NQTDIVIDER,2)\n    const ignisTotalBalanceStr = (<Fragment>({ignisTotalBalance})</Fragment>)\n    const gammaAvailableBalance = Math.min(walletCurrency.unitsQNT,walletCurrency.unconfirmedUnitsQNT)\n    const gammaLocked = walletCurrency.unitsQNT !== walletCurrency.unconfirmedUnitsQNT;\n    const gammaTotalBalanceStr = (<Fragment>({walletCurrency.unitsQNT})</Fragment>)\n\n    // this makes the backbutton show for every page except /game (exact) and game/exchange.\n    // make a function out of it if more exceptions are required.\n    const showMenuButton = this.props.match.isExact | this.props.location.pathname === \"/game/exchange\";\n    \n    return (\n        <div className={classes.root} style={{marginTop:110}}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                  <img src={logo} alt=\"Logo\" style={{height:100}}/>\n                  <Hidden smDown>\n                    <Link className={classes.link} to=\"/game\" style={path === '/game' ? {backgroundColor:'#484848'} : {backgroundColor:'#303030'}}>\n                      <ListItem button key=\"Wallet\" onClick={()=>this.setState({drawerOpen:false})}>\n                        <ListItemText primary=\"My Cards\" />\n                      </ListItem>\n                    </Link>\n                    <Link className={classes.link} to=\"/game/history\" style={path === '/game/history' ? {backgroundColor:'#484848'} : {backgroundColor:'#303030'}}>\n                        <ListItem button key=\"History\" onClick={()=>this.setState({drawerOpen:false})}>\n                          {this.props.lastUpdate.newTx !== 0 ? (\n                              <Badge badgeContent={this.props.lastUpdate.newTx} color=\"secondary\"> \n                                <ListItemText primary=\"Transaction History\" />\n                              </Badge>\n                            ):(\n                              <ListItemText primary=\"Transaction History\" />                  \n                            )\n                          }\n                      </ListItem>\n                    </Link>\n                    <Link className={classes.link} to=\"/game/exchange\" style={path === '/game/exchange' ? {backgroundColor:'#484848'} : {backgroundColor:'#303030'}}>\n                        <ListItem button key=\"Exchange\" onClick={()=>this.setState({drawerOpen:false})}>\n                          {this.props.lastUpdate.newTrades !== 0 ? (\n                              <Badge badgeContent={this.props.lastUpdate.newTrades} color=\"secondary\"> \n                                <ListItemText primary=\"Exchange\" />\n                              </Badge>\n                            ):(\n                              <ListItemText primary=\"Exchange\" />                  \n                            )\n                          }\n                        </ListItem>\n                    </Link>\n\n                    <Link className={classes.link} to=\"/game/jackpot\" style={path === '/game/jackpot' ? {backgroundColor:'#484848'} : {backgroundColor:'#303030'}}>\n                        <ListItem button key=\"Progress\" onClick={()=>this.setState({drawerOpen:false})}>\n                        <ListItemText primary=\"Claim Jackpot\" />\n                      </ListItem>\n                    </Link>\n                  </Hidden>\n                    <Typography  variant=\"h6\" color=\"inherit\" className={classes.grow}>\n                        {' '}\n                    </Typography>\n                    <FormControlLabel\n                      control={\n                        <Switch name=\"showAll\" checked={this.props.showAllCards}\n                                onChange={this.props.toggleShowAllCards}/>\n                        }\n                      label=\"Show All Cards\" \n                    />\n                  <Hidden only={['lg', 'xl  ']}>\n                    {showMenuButton ? (\n                    <IconButton\n                      color=\"inherit\"\n                      aria-label=\"Open drawer\"\n                      onClick={()=>this.setState({drawerOpen:!drawerOpen})}\n                      style={{marginLeft: 'auto'}}\n                    >\n                      <MenuIcon />\n                      </IconButton>\n                    ) : (\n                      <BackButton/>\n                    )}\n                  </Hidden>\n                  <Hidden smDown> \n                    <Button variant=\"outlined\" aria-label=\"ignis balance\" name=\"ignis_balance\" onClick={this.handleClick}>\n                      $ {ignisAvailableBalance} {fundsLocked ? (ignisTotalBalanceStr) : null}\n                    </Button>\n                    <Button variant=\"outlined\" aria-label=\"currency balance\" name=\"currency_balance\" onClick={this.handleClick}>\n                      &Gamma; {gammaAvailableBalance} {gammaLocked ? (gammaTotalBalanceStr) : null}\n                    </Button>\n                    \n                      <Link to=\"/game/tarasca\">\n                        <IconButton>\n                          <Title />\n                        </IconButton>\n                        {/* <ListItem button key=\"Tarasca\" onClick={()=>this.setState({drawerOpen:false})}>\n                          <ListItemIcon><Title /></ListItemIcon>\n                          <ListItemText primary=\"Tarasca Card\" />\n                        </ListItem> */}\n                      </Link>\n                      {/* <Link to=\"/game/settings\">\n                        <IconButton>\n                            <Settings />\n                        </IconButton>\n                      </Link> */}\n                      <Button variant=\"outlined\" aria-label=\"currency balance\" name=\"settings\" onClick={this.handleClick} style={{padding: 0, border: 'none'}}>\n                        <IconButton>\n                            <Settings />\n                        </IconButton>\n                      </Button>\n                      <Link to=\"/logout\">\n                        <IconButton>\n                            <ExitToApp />\n                        </IconButton>\n                      </Link>\n                    </Hidden>\n                </Toolbar>\n            </AppBar>\n            <Menu\n              id=\"account-menu\"\n              anchorEl={anchorEl}\n              open={Boolean(anchorEl)}\n              onClose={this.handleClose}\n            >\n            {currentName===\"settings\" ?\n              (<Fragment>\n               <Link className={classes.link} to=\"/game/fundaccount\" >\n                <ListItem button key=\"Fund Account\" onClick={this.handleClose}>\n                  <ListItemText primary=\"Fund Account\" />\n                </ListItem>\n              </Link>\n              <Link className={classes.link} to=\"/game/receive\">\n                <ListItem button key=\"Receive Card\" onClick={this.handleClose}>\n                    <ListItemText primary=\"Receive Card\" />              \n                </ListItem>\n              </Link>\n              <Link className={classes.link} to=\"/game/settings\">\n                <ListItem button key=\"Settings\" onClick={this.handleClose}>\n                  <ListItemText primary=\"User Info\" />\n                </ListItem>\n              </Link>  \n              <Link className={classes.link} to=\"/game/faq\">\n                <ListItem button key=\"Faq\" onClick={this.handleClose}>\n                  <ListItemText primary=\"Help / FAQ\" />\n                </ListItem>\n              </Link>\n            </Fragment>)\n            :\n              currentName===\"ignis_balance\"? (\n                <Fragment>\n                  <Link className={classes.link} \n                        to={(wallet.balanceNQT===\"0\") ? \"#\" : \"/game/sendignis\"}>\n                    <MenuItem onClick={this.handleClose}\n                      disabled={wallet.balanceNQT===\"0\"}\n                    >\n                      Send\n                    </MenuItem>\n                  </Link>\n                  <Link className={classes.link} \n                        to={(wallet.balanceNQT===\"0\") ? \"#\" : \"/game/buypack\"}>\n                    <MenuItem onClick={this.handleClose}\n                      disabled={wallet.balanceNQT===\"0\"}\n                    >\n                      Buy Cards\n                    </MenuItem>\n                  </Link>\n                  <Link className={classes.link} to=\"/game/fundaccount\">\n                    <MenuItem onClick={this.handleClose}>Get more</MenuItem>\n                  </Link>\n                </Fragment>\n              ):(\n                <Fragment>\n                  <Link className={classes.link} \n                        to={(walletCurrency.unitsQNT===0) ? \"#\" : \"/game/sendcurrency\"}>\n                    <MenuItem onClick={this.handleClose}\n                      disabled={walletCurrency.unitsQNT===0}\n                    >\n                      Send\n                    </MenuItem>\n                  </Link>\n                  <Link className={classes.link} \n                        to={(walletCurrency.unitsQNT===0) ? \"#\" : \"/game/buypackcur\"}>\n                    <MenuItem onClick={this.handleClose}\n                      disabled={walletCurrency.unitsQNT===0}\n                    >\n                      Buy Cards\n                    </MenuItem>\n                  </Link>\n                  <Link className={classes.link} to=\"/game/fundaccount\">\n                    <MenuItem onClick={this.handleClose}>Get more</MenuItem>\n                  </Link>\n                </Fragment>\n              )\n            }\n            </Menu>\n            <nav className={classes.drawer}>\n            <Hidden smUp implementation=\"css\">\n              <Drawer\n                variant=\"temporary\"\n                anchor={'left'}\n                open={drawerOpen}\n                onClose={()=>this.setState({drawerOpen:!drawerOpen})} \n              >\n                {drawer}\n              </Drawer>\n            </Hidden>\n          </nav>\n        </div>\n      );\n    }\n}\n\nexport default withStyles(styles, {withTheme:true})(NavBar);\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\faq.js",["257"],"// faq.js\nimport React, { Fragment, useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nimport faq from './faq.json';\n\nexport const Faq = (props) => {\n    const [expanded, handleChange] = useState(\"none\");\n    const [test,handleTestChange] = useState(\"none\");\n    \n    return(\n      <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"800px\", display:\"inline-block\"}}>\n        <Grid container\n          justify=\"center\"\n          direction=\"column\"\n          alignItems=\"stretch\"\n          spacing={24}\n          className=\"boxed\"\n          style={{marginTop:10}}\n        >\n          <Grid item style={{textAlign:\"left\"}}>\n            <Typography variant=\"display1\">Frequently asked questions</Typography>\n          </Grid>\n          <Grid item style={{textAlign:\"left\"}}>\n\n            <List>                  \n                { \n                    faq.faq.map((sec,index)=>{\n                        const idstr = 'panel'+index;\n                        return(\n                          <ExpansionPanel style={{backgroundColor:'rgb(16 57 43)', border:'1px solid', borderColor:'#ffffff3b'}} expanded={expanded === idstr || expanded.includes(idstr)} onChange={()=>handleChange(expanded === idstr || expanded.includes(idstr) ? \"false\":idstr)}>\n                            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                              <Typography variant='h6'>{sec.section}</Typography>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                              <dl>\n                                {\n                                    sec.questions.map((qa,index1)=>{\n                                        const idque = idstr+index1;\n                                        return (\n                                          <div onClick={()=>handleTestChange(test === idque ? 'false' : idque)}>\n                                            <ExpansionPanel style={{backgroundColor:'rgb(16 57 43)', border:'1px solid', borderColor:'#ffffff3b'}} expanded={test === idque}>\n                                              <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                                                <Typography variant='subtitle1'>{`${index1+1}. ${qa.Q}`}</Typography>\n                                              </ExpansionPanelSummary>\n                                              <ExpansionPanelDetails>\n                                                <Typography variant='subtitle1'>{qa.A}</Typography>\n                                              </ExpansionPanelDetails>\n                                            </ExpansionPanel>\n                                          </div>\n                                        // <Fragment>\n                                        //     <dt><Typography variant=\"subtitle1\">{qa.Q}</Typography></dt>\n                                        //     <dd><Typography variant=\"subtitle1\">{qa.A}</Typography></dd>\n                                        // </Fragment>\n                                        )\n                                    })\n                                }\n                              </dl>\n                            </ExpansionPanelDetails>\n                          </ExpansionPanel>\n                        )\n                    })\n                }\n            </List>\n\n          </Grid>\n        </Grid>\n      </div>\n    )\n  }","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\txhistory.js",["258","259","260"],"//txhistory\nimport React, { Fragment } from 'react';\nimport {CSSTransitionGroup} from 'react-transition-group';\n\nimport { COLLECTIONACCOUNT, NQTDIVIDER } from './constants';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Badge from '@material-ui/core/Badge';\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\nimport Divider from '@material-ui/core/Divider';\n\nimport './txhistory.css';\nimport Coins from './images/coins.svg';\nimport Giftz from './images/giftz.png'\n\nexport function parseAccount(account,contacts=[{accountRs:COLLECTIONACCOUNT,name:\"Tarasca DAO\"}]) {\n  const found = contacts.find((contact)=>{ return contact.accountRs === account});\n  //console.log(found);\n  if (found === undefined) {\n    return account;\n  }\n  else {\n    return found.name;\n  }\n}\n\n\nexport function TimeStamp({tx,eb}){\n  //console.log(eb);\n  var txstamp = new Date(eb.getTime());\n  //console.log(txstamp);\n  txstamp.setSeconds(+txstamp.getSeconds()+tx.timestamp);\n  //console.log(txstamp);\n  let status = \"unconfirmed\";\n  if (tx.confirmations === 1){\n    status = \"just confirmed\";\n  }\n  else if (tx.confirmations > 1){\n    status = \"confirmed\"\n  }\n  const Month = txstamp.getMonth()+1;\n  const datestring = txstamp.getFullYear().toString()+\"-\"+ Month.toString().padStart(2,\"0\") + \"-\"+txstamp.getDate().toString().padStart(2,\"0\");\n  const timestring = txstamp.getHours().toString().padStart(2,\"0\") + \":\" + txstamp.getMinutes().toString().padStart(2,\"0\")+ \":\" + txstamp.getSeconds().toString().padStart(2,\"0\");\n\n  return(\n    <Fragment>\n      <Typography>{datestring} {timestring} ({status})</Typography>\n    </Fragment>\n  )\n}\n\n\nfunction AssetExchange({tx,card,eb,order,type,badge}){\n  //console.log(card);\n  const card_print = card ? card : {name:\"\",channel:\"\"};\n\n  return (\n    <Grid container\n      justify=\"center\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"body2\">EXCHANGE</Typography>\n            </Badge>\n          ):(\n            <Typography variant=\"body2\">EXCHANGE</Typography>\n          )}          \n        </Grid>\n        <Grid item>\n          <TimeStamp tx={tx} eb={eb}/>\n        </Grid>\n        <Grid item>            \n          <Typography>{type}: {order}</Typography>\n        </Grid>\n        <Grid item>\n          <Typography>{tx.attachment.quantityQNT} {card_print.name}</Typography>\n        </Grid>\n        <Grid item>\n          <Typography>Sender: You</Typography>\n        </Grid>\n    </Grid>\n  )\n}\n\nfunction IncomingCardTransferMobile({tx,card,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item xs={12}>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"h6\" align=\"left\">Received {card.name} ({card.channel})</Typography>                \n            </Badge>\n          ):(\n              <Typography variant=\"h6\" align=\"left\">Received {card.name} ({card.channel})</Typography>                \n          )}          \n        </Grid>\n        <Grid item xs={4}>\n              <img src={card.cardThumbUrl} alt=\"card img\" width=\"80px\"/>                   \n        </Grid>\n        <Grid item xs={8} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n          <Grid item>\n            <Typography>Amount: {tx.attachment.quantityQNT}</Typography>\n          </Grid>\n          <Grid item> \n            <TimeStamp tx={tx} eb={eb}/>\n          </Grid>\n          <Grid item>            \n            <Typography align=\"left\">Sender: {parseAccount( tx.senderRS)}</Typography>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\n\nfunction IncomingCardTransfer({tx,card,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={16}>\n        <Grid item xs={3}>\n          <img src={card.cardThumbUrl} alt=\"card img\"\n            width=\"80px\"  \n            style={{opacity:card.quantityQNT > 0 ? 1 : 0.1}}/>                   \n        </Grid>\n        <Grid item xs={9} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n            <Grid item xs={12}>\n              {(badge===true) ? (\n                <Badge color=\"secondary\">\n                  <Typography variant=\"h6\">Received: {card.name} ({card.channel})</Typography>\n                </Badge>\n                ):(\n                  <Typography variant=\"h6\">Received: {card.name} ({card.channel})</Typography>\n              )}\n            </Grid>\n            <Grid item xs={12} container direction=\"row\">\n\n              <Grid item xs={12} sm={6} container direction=\"column\" alignItems=\"flex-start\">\n                <Grid item>\n                  <Typography>Amount: {tx.attachment.quantityQNT}</Typography>\n                </Grid>\n                <Grid item> \n                  <TimeStamp tx={tx} eb={eb}/>\n                </Grid>\n              </Grid>\n            \n              <Grid item xs={12} sm={6} container direction=\"column\" alignItems=\"flex-start\">\n                \n                <Grid item>            \n                  <Typography>Recipient: You</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography>Sender: {parseAccount( tx.senderRS)}</Typography>\n                </Grid>\n              </Grid>\n\n          </Grid>\n        </Grid>\n        \n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\n\nfunction OutgoingCardTransfer({tx,card,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={16}>\n        <Grid item xs={3}>\n          <img src={card.cardThumbUrl} alt=\"card img\"\n            width=\"80px\"  \n            style={{opacity:card.quantityQNT > 0 ? 1 : 0.1}}/>                   \n        </Grid>\n        <Grid item xs={9} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n            <Grid item xs={12}>\n              {(badge===true) ? (\n                <Badge color=\"secondary\">\n                  <Typography variant=\"h6\">sent: {card.name} ({card.channel})</Typography>\n                </Badge>\n                ):(\n                  <Typography variant=\"h6\">sent: {card.name} ({card.channel})</Typography>\n              )}\n            </Grid>\n            <Grid item xs={12} container direction=\"row\">\n\n              <Grid item xs={6} container direction=\"column\" alignItems=\"flex-start\">\n                <Grid item>\n                  <Typography>Amount: {tx.attachment.quantityQNT}</Typography>\n                </Grid>\n                <Grid item> \n                  <TimeStamp tx={tx} eb={eb}/>\n                </Grid>\n              </Grid>\n            \n              <Grid item xs={6} container direction=\"column\" alignItems=\"flex-start\">\n                <Grid item>\n                  <Typography>Sender: You</Typography>\n                </Grid>\n                <Grid item>            \n                  <Typography>Recipient: {parseAccount( tx.recipientRS)}</Typography>\n                </Grid>\n              </Grid>\n\n          </Grid>\n        </Grid>\n        \n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\nfunction OutgoingCardTransferMobile({tx,card,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item xs={12}>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"h6\" align=\"left\">sent {card.name} ({card.channel})</Typography>                \n            </Badge>\n          ):(\n              <Typography variant=\"h6\" align=\"left\">sent {card.name} ({card.channel})</Typography>                \n          )}          \n        </Grid>\n        <Grid item xs={4}>\n              <img src={card.cardThumbUrl} alt=\"card img\" width=\"80px\"/>                   \n        </Grid>\n        <Grid item xs={8} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n          <Grid item>\n            <Typography>Amount: {tx.attachment.quantityQNT}</Typography>\n          </Grid>\n          <Grid item> \n            <TimeStamp tx={tx} eb={eb}/>\n          </Grid>\n          <Grid item>            \n            <Typography align=\"left\">Recipient: {parseAccount( tx.recipientRS)}</Typography>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n      </Grid>\n  )\n}\n\nfunction OutgoingCurrencyTransfer({tx,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item xs={12}>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"h6\" align=\"left\">sent {tx.attachment.unitsQNT} &Gamma;</Typography>                \n            </Badge>\n          ):(\n              <Typography variant=\"h6\" align=\"left\">send {tx.attachment.unitsQNT} &Gamma;</Typography>                \n          )}          \n        </Grid>\n        <Grid item xs={4}>\n            <img src={Giftz} alt=\"Giftz\" width={\"50px\"}/> \n        </Grid>\n        <Grid item xs={8} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n          <Grid item> \n            <TimeStamp tx={tx} eb={eb}/>\n          </Grid>\n          <Grid item>            \n            <Typography align=\"left\">Sender: {parseAccount( tx.senderRS)}</Typography>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\n\n\nfunction IncomingCurrencyTransfer({tx,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item xs={12}>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"h6\" align=\"left\">Received {tx.attachment.unitsQNT} &Gamma;</Typography>                \n            </Badge>\n          ):(\n              <Typography variant=\"h6\" align=\"left\">Received {tx.attachment.unitsQNT} &Gamma;</Typography>                \n          )}          \n        </Grid>\n        <Grid item xs={4}>\n              <img src={Giftz} alt=\"Giftz\" width={\"50px\"}/> \n        </Grid>\n        <Grid item xs={8} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n          <Grid item> \n            <TimeStamp tx={tx} eb={eb}/>\n          </Grid>\n          <Grid item>            \n            <Typography align=\"left\">Recipient: {parseAccount( tx.recipientRS)}</Typography>\n          </Grid>\n        </Grid>\n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\n\nfunction OutgoingMoneyTransfer({tx,currency,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item xs={12}>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"h6\" align=\"left\">sent: {tx.amountNQT/NQTDIVIDER} &Iota;</Typography>\n            </Badge>\n          ):(\n              <Typography variant=\"h6\" align=\"left\">sent: {tx.amountNQT/NQTDIVIDER} &Iota;</Typography>\n          )}\n        </Grid>        \n        <Grid item xs={4}>\n          <img src={Coins} alt=\"Coins\" width={\"50px\"}/> \n        </Grid>\n        <Grid item xs={8} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n          <Grid item>\n            <TimeStamp tx={tx} eb={eb}/>\n          </Grid>\n          <Grid item>\n            <Typography>Recipient: {parseAccount( tx.recipientRS)}</Typography>\n          </Grid>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\nfunction IncomingMoneyTransfer({tx,currency,eb,badge}){\n  return (\n    <Grid container\n      justify=\"flex-start\"\n      alignItems=\"center\"\n      direction=\"row\"\n      spacing={8}>\n        <Grid item xs={12}>\n          {(badge===true) ? (\n            <Badge color=\"secondary\">\n              <Typography variant=\"h6\" align=\"left\">Received: {tx.amountNQT/NQTDIVIDER} &Iota;</Typography>\n            </Badge>\n          ):(\n              <Typography variant=\"h6\" align=\"left\">Received: {tx.amountNQT/NQTDIVIDER} &Iota;</Typography>\n          )}\n        </Grid>  \n        <Grid item xs={4}>\n          <img src={Coins} alt=\"Coins\" width={\"50px\"}/> \n        </Grid>\n        <Grid item xs={8} container direction=\"column\" alignItems=\"flex-start\" spacing={8}>\n                <Grid item>\n                  <TimeStamp tx={tx} eb={eb}/>\n                </Grid>\n                <Grid item>\n                  <Typography>Sender: {parseAccount( tx.senderRS)}</Typography>\n                </Grid>\n        </Grid>\n\n        <Grid item xs={12}>\n          <Divider variant=\"fullWidth\" />\n        </Grid>\n    </Grid>\n  )\n}\n\n\n\nexport function TxHistory (props) {\n  const alltx = props.unconfirmedTransactions.concat(props.blockchainTransactions);\n  const displayed = alltx;\n  //const timestamp = getTimestamp(props.user.name);\n  //console.log(timestamp);\n  //console.log(\"lastUpdate: newTx:\"+props.lastUpdate.newTx+\", timestamp: \"+props.lastUpdate.timestamp)\n  const txs = displayed.map((tx,index) => {\n    const badge = tx.blockTimestamp > props.lastUpdate.timestamp;\n    //console.log(\"current tx:\"+tx.blockTimestamp+\" storedTimestamp:\"+props.lastUpdate.timestamp+\" badge:\"+badge);\n    if (tx.type === 2 & tx.subtype === 1 & tx.recipientRS === props.user.accountRs){\n      //Asset Transfer \n      //console.log(tx);\n      const card = props.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n      if (card) {\n        return (\n          <div className=\"transaction\" key={tx.fullHash}>\n            <Hidden smUp>\n              <IncomingCardTransferMobile tx={tx} card={card} eb={props.epoch_beginning} badge={badge}/>\n            </Hidden>\n            <Hidden xsDown>\n              <IncomingCardTransferMobile tx={tx} card={card} eb={props.epoch_beginning} badge={badge}/>\n            </Hidden>\n          </div>\n        )\n      }\n      else return null;\n              \n    }\n    else if (tx.type === 2 & tx.subtype === 1 & tx.senderRS === props.user.accountRs){\n      //Asset Transfer\n      const card = props.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n      if (card) {\n        return (\n          <div className=\"transaction\" key={tx.fullHash}>\n            <Hidden smUp>\n              <OutgoingCardTransferMobile tx={tx} card={card} eb={props.epoch_beginning} badge={badge}/>\n            </Hidden>\n            <Hidden xsDown>\n              <OutgoingCardTransferMobile tx={tx} card={card} eb={props.epoch_beginning} badge={badge}/>\n            </Hidden>\n          </div>\n        )\n      }\n    }\n    else if (tx.type === 2 & tx.subtype === 2) {\n      // place ask order\n      //Asset Transfer\n      const card = props.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n      if (card) {\n        return (\n          <div className=\"transaction\" key={tx.fullHash}>\n            <AssetExchange tx={tx} card={card} eb={props.epoch_beginning} type=\"Placed\" order=\"Ask Order\" badge={badge}/>\n          </div>\n        )\n      }\n    }\n    else if (tx.type === 2 & tx.subtype === 3) {\n      // place bid order\n      //Asset Transfer\n      const card = props.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n      if (card) {\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <AssetExchange tx={tx} card={card} eb={props.epoch_beginning} type=\"Placed\" order=\"Bid Order\" badge={badge}/>\n          </div>\n        )\n      }\n    }\n    else if (tx.type === 2 & tx.subtype === 4) {\n      // cancel ask order\n      //Asset Transfer\n      //const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n      //if (card) {\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <AssetExchange tx={tx} eb={props.epoch_beginning} type=\"Cancelled\" order=\"Ask Order\" badge={badge}/>\n          </div>\n        )\n      //}\n    }\n    else if (tx.type === 2 & tx.subtype === 5) {\n      // cancel bid order\n      //Asset Transfer\n      //const card = self.state.collectionCards.find((card)=>(card.asset === tx.attachment.asset))\n      //if (card) {\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <AssetExchange tx={tx} eb={props.epoch_beginning} type=\"Cancelled\" order=\"Bid Order\" badge={badge}/>\n          </div>\n        )\n      //}\n    }\n    else if (tx.type === 5 & tx.subtype === 3){\n      // Currency Transfer \n      if (tx.senderRS === props.user.accountRs){\n        //outgoing\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <OutgoingCurrencyTransfer tx={tx} eb={props.epoch_beginning} badge={badge}/>\n          </div>\n        )\n      }\n      else {\n        // incoming\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <IncomingCurrencyTransfer tx={tx} eb={props.epoch_beginning} badge={badge}/>\n          </div>\n        )\n      }\n    }\n    else if (tx.type === 0 & tx.subtype === 0){\n      // Ordinary Payment (IGNIS TX)\n      if (tx.senderRS === props.user.accountRs){\n        //outgoing\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <OutgoingMoneyTransfer tx={tx} eb={props.epoch_beginning} badge={badge}/>\n          </div>\n        )\n      }\n      else {\n        // incoming\n        return(\n          <div className=\"transaction\" key={tx.fullHash}>\n            <IncomingMoneyTransfer tx={tx} eb={props.epoch_beginning} badge={badge}/>\n          </div>\n        )\n      }\n    }\n    \n  });\n\n  return (\n    <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"1024px\", display:\"inline-block\"}}>\n      <Typography variant=\"h2\" style={{marginBottom:20}}>Transaction History</Typography>\n      <Button variant=\"outlined\" onClick={()=>{props.resetNewTx()}} style={{marginBottom:20}}>mark all as read</Button>\n      <CSSTransitionGroup\n        transitionName=\"example\"\n        transitionEnterTimeout={500}\n        transitionLeaveTimeout={300}\n      >\n        {txs}\n      </CSSTransitionGroup>\n    </div>\n  )    \n}\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\new.js",["261","262","263"],"import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport {Link, withRouter} from 'react-router-dom';\n\nimport {initUser} from './storage';\nimport {secretPhraseToAccountId} from 'ardorjs';\nimport {generatePassphrase} from './generatePassphrase';\nimport { validatePin, validateUsername } from '../common/validators';\n\n\nclass NewUser_ extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      name:\"\",\n      nameStatus:{invalid:false,error:\"\"},\n      accountRs:\"\",\n      accountRsStatus:{invalid:false,error:\"\"},\n      passPhrase:\"\",\n      usePin:true,\n      Pin:\"\",\n      PinStatus:{invalid:false,error:\"\"},\n      generateStatus:{invalid:false,error:\"\"},\n      formValid:false\n    }\n  }\n\n  generateAccount = () => {\n    let phrase = generatePassphrase();\n    let accountRs = secretPhraseToAccountId(phrase,false);\n    this.setState({passPhrase:phrase, accountRs:accountRs, generateStatus:{invalid:false,error:\"\"}});\n  }\n\n  validateForm(){\n    const PinValid = !this.state.PinStatus.invalid;\n    const nameValid = !this.state.nameStatus.invalid;\n    const ardorValid = !this.state.generateStatus.invalid;\n    this.setState({formValid:(PinValid & nameValid & ardorValid)});\n  }\n\n  onClick = () => {\n    // function will only be called if all fields are valid. \n    // Hence only checking for usePin == true to start encryption.\n    let nameStatus = validateUsername(this.state.name,this.state.nameStatus,this.props.userList);\n    let pinStatus = validatePin(this.state.Pin,this.state.PinStatus);\n    let generateStatus = ((this.state.accountRs.length === 0) | (this.state.passPhrase.length===0)) \n                ? {invalid:true,error:\"Please generate an Ardor wallet.\"}\n                : {invalid:false,error:\"\"};\n\n    if (nameStatus.invalid | (this.state.usePin & pinStatus.invalid) | generateStatus.invalid){\n      this.setState({nameStatus:nameStatus, PinStatus:pinStatus, generateStatus:generateStatus});\n    }\n    else {\n      // let user = {\n      //   name:this.state.name, \n      //   accountRs:this.state.accountRs,\n      //   usePin:this.state.usePin,\n      //   token: (this.state.usePin) \n      //               ? encrypt(this.state.passPhrase,this.state.Pin) : \"\"\n      // } \n      let user = initUser(this.state.name,this.state.accountRs,this.state.usePin,this.state.passPhrase,this.state.Pin);\n      this.props.registerNewUser(user);\n      this.props.history.push(\"/login\");\n    }\n  }\n    \n  render(){\n    var self = this;\n    //console.log(this.props);\n    return (\n      <form>\n        <div style={{textAlign:\"center\", display:\"inline-block\"}}>\n        <Grid container\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n            spacing={24}\n          >\n            <Grid item>\n              <Typography style={{textAlign:\"right\"}}><Link className=\"link\" to=\"/login\">Back to Login</Link>{' '} \n                  or <Link className=\"link\" to=\"/login/returning\">Restore User</Link></Typography>\n            </Grid>\n            <Grid item>\n              <Typography variant=\"h5\">Create a new Account</Typography>\n            </Grid>\n            <Grid item>\n              <TextField\n                id=\"outlined-full-width\"\n                label=\"Name\"\n                placeholder=\"Enter your name\"\n                helperText=\"used to identify you on this device\"\n                fullWidth\n                margin=\"normal\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                  shrink: true,\n                }}\n                onChange={(e)=>{\n                  let value = e.target.value;\n                  self.setState({name:value}, ()=>{\n                    self.setState({nameStatus:validateUsername(value,self.state.nameStatus,self.props.userList)}, \n                    self.validateForm)\n                })}}\n                value={this.state.name}\n                error={this.state.nameStatus.invalid}\n              />\n            </Grid>\n            <Grid item>\n              <Button fullWidth variant=\"outlined\" onClick={() => this.generateAccount()}>\n                  Generate Wallet\n              </Button>\n            </Grid>\n            <Grid item>\n              <TextField disabled\n                id=\"account\"\n                label=\"Account\"\n                helperText=\"Ardor Account ID\"\n                fullWidth\n                margin=\"normal\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                  readOnly: true,\n                }}\n                value={this.state.accountRs}\n                error={this.state.generateStatus.invalid}\n              />\n\n              <TextField disabled multiline fullWidth\n                id=\"passphrase\"\n                label=\"Pass Phrase\"\n                rows=\"4\"\n                defaultValue=\"your pass phrase\"\n                margin=\"normal\"\n                variant=\"outlined\"\n                InputLabelProps={{\n                  readOnly: true,\n                }}\n                value={this.state.passPhrase}\n                error={this.state.generateStatus.invalid}\n              />\n            </Grid>\n            \n            {\n              this.state.usePin ? (\n                <Grid item>\n                  <TextField \n                    fullWidth\n                    id=\"pin\"\n                    label=\"PIN\"\n                    value={this.state.Pin}\n                    onChange={(e)=>{\n                      let value = e.target.value;\n                      self.setState(\n                        {Pin:value},\n                        ()=>{\n                          self.setState({PinStatus:validatePin(value,self.state.PinStatus)}, self.validateForm)\n                        })}}\n                    type=\"tel\"\n                    className=\"numeric-password\"\n                    InputLabelProps={{\n                      type:\"tel\",\n                      shrink: true,\n                    }}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    error={this.state.PinStatus.invalid}\n                    autoComplete=\"off\"\n                  />                \n                </Grid>\n                ) : null\n            }\n            <Grid item>\n              <Button fullWidth variant=\"outlined\" onClick={()=>this.onClick()}>\n                Register!\n              </Button>\n            </Grid>\n          </Grid>\n        </div>\n      </form>  \n    );\n  }\n}\n\nexport const NewUser = withRouter(NewUser_);\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\snackbar.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\accountfield.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\loginform.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\returning.js",["264","265"],"import React, {Component} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Switch from '@material-ui/core/Switch';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport {Link, withRouter} from 'react-router-dom';\n\nimport {encrypt} from './storage';\nimport { validatePin, validatePassPhrase, validatePhraseLength, validateUsername , validateAddress} from '../common/validators';\n\n\nclass ReturningUser_ extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      name:\"\",\n      nameStatus:{invalid:false,error:\"\"},\n      accountRs:\"\",\n      accountRsStatus:{invalid:false,error:\"\"},\n      passPhrase:\"\",\n      passPhraseStatus:{invalid:false,error:\"\"},\n      usePin:true,\n      Pin:\"\",\n      PinStatus:{invalid:false,error:\"\"},\n      formValid:false      \n    }\n  }\n\n  onClick = () => {\n    let status = validatePassPhrase(this.state.passPhrase,this.state.passPhraseStatus, this.state.accountRs);\n    let nameStatus = validateUsername(this.state.name,this.state.nameStatus,this.props.userList);\n    console.log(nameStatus);\n    if (status.invalid | nameStatus.invalid) {\n      this.setState({passPhraseStatus:status,nameStatus:nameStatus});\n    }\n    else {\n      let user = { \n        name:this.state.name, \n        accountRs:this.state.accountRs,\n        usePin:this.state.usePin,\n        token: (this.state.usePin && this.state.passPhrase && this.state.Pin) \n                    ? encrypt(this.state.passPhrase,this.state.Pin) : \"\"\n      } \n      this.props.registerNewUser(user);\n      this.props.history.push(\"/login\");\n    }\n  }\n\n  validateForm(){\n    const nameValid = !this.state.nameStatus.invalid;\n    const PinValid = this.state.usePin ? !this.state.PinStatus.invalid : true;\n    const passPhraseValid = !this.state.passPhraseStatus.invalid;\n    this.setState({formValid:PinValid & passPhraseValid & nameValid});\n  }\n  \n  render() {\n    var self = this;\n    return (\n      <div style={{textAlign:\"center\", display:\"inline-block\"}}>\n        <Grid container\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n            spacing={24}\n          >\n            <Grid item>\n              <Typography style={{textAlign:\"right\"}}><Link className=\"link\" to=\"/login\">Back to Login</Link>{' '} \n                    or <Link className=\"link\" to=\"/login/new\">New User</Link></Typography>\n              <Typography variant=\"h5\">Restore your account on this device</Typography>\n              <form>\n                <TextField\n                  id=\"outlined-full-width\"\n                  label=\"Name\"\n                  style={{ margin: 8 }}\n                  placeholder=\"Enter your name\"\n                  helperText=\"used to identify you on this device\"\n                  fullWidth\n                  margin=\"normal\"\n                  variant=\"outlined\"\n                  InputLabelProps={{\n                    shrink: true,\n                  }}\n                  onChange={(e)=>{\n                    let value = e.target.value;\n                    self.setState({name:value}, ()=>{\n                      self.setState({nameStatus:validateUsername(value,self.state.nameStatus,self.props.userList)}, \n                      self.validateForm)\n                  })}}\n                  value={this.state.name}\n                  error={this.state.nameStatus.invalid}\n                />\n                <FormGroup>\n                  <TextField\n                    id=\"account\"\n                    label=\"Account\"\n                    style={{ margin: 8 }}\n                    helperText=\"Ardor Account ID\"\n                    fullWidth\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    value={this.state.accountRs}\n                    onChange={(e)=>{\n                      let value = e.target.value;\n                      this.setState({accountRs:value}, () => {\n                        self.setState({\n                            accountRsStatus:validateAddress(value,self.state.accountRsStatus)},\n                            self.validateForm)\n                      \n                    })}}\n                    error={this.state.accountRsStatus.invalid}\n                  />\n\n                  <TextField multiline\n                    id=\"passphrase\"\n                    label=\"Pass Phrase\"\n                    rows=\"4\"\n                    defaultValue=\"your pass phrase\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    value={this.state.passPhrase}\n                    onChange={(e)=>{\n                      let value = e.target.value;\n                      self.setState({passPhrase:value},()=>{\n                        self.setState({\n                        passPhraseStatus:validatePhraseLength(value,self.state.passPhraseStatus)},\n                        self.validateForm)\n                      })}}\n                    error={this.state.passPhraseStatus.invalid}\n                  />\n                </FormGroup>\n                 \n                {\n                  this.state.usePin ? (\n                    <FormGroup>\n                      <TextField\n                        id=\"pin\"\n                        label=\"PIN\"\n                        value={this.state.Pin}\n                        onChange={(e)=>{\n                          let value = e.target.value;\n                          self.setState(\n                            {Pin:value},\n                            ()=>{\n                              self.setState({PinStatus:validatePin(value,self.state.PinStatus)}, self.validateForm)\n                            })}}\n                        type=\"tel\"\n                        className=\"numeric-password\"\n                        InputLabelProps={{\n                          type:\"tel\",\n                          shrink: true,\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        error={this.state.PinStatus.invalid}\n                        autoComplete=\"off\"\n                      />                \n                    </FormGroup>\n                    ) : null\n                }\n                <FormGroup>\n                  <Button variant=\"outlined\" disabled={!self.state.formValid} onClick={()=>this.onClick()}>\n                      Register User\n                  </Button>\n                </FormGroup>\n              </form>\n          </Grid>\n        </Grid>\n      </div>  \n    );\n  }\n}\n\nexport const ReturningUser = withRouter(ReturningUser_);","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\validators.js",["266","267","268","269","270","271","272","273"],"import {secretPhraseToAccountId} from 'ardorjs';\n\n\nfunction validateQuantity(value,max,min,status) {\n  let invalid=status.invalid;\n  let error=status.error;\n  let val_num = new Number(value);\n  console.log(value,max,min,invalid,error,val_num);\n  if (value!==''){\n    invalid = !(value.match('[1-9]\\d*|0\\d+'));\n    error = invalid ? value+' is not a number.' : '';\n    if (val_num<=max && val_num >= min){\n      // its a number!\n      if (val_num%1!==0){\n          return {invalid:true, error:'You can only buy whole packs'};\n      }\n      return {invalid:invalid, error:error};\n    }\n    else if (val_num>max) {\n      invalid = true;\n      error=value+' is over the maximum amount ('+max+').';\n      return {invalid:invalid, error:error};\n    }\n    else if (val_num<min){\n      invalid = true;\n      error=value+' is below the minimum amount ('+min+').';\n      return {invalid:invalid, error:error};\n    }\n  }\n  else {\n    invalid = false;\n    error = '';\n  }\n  return {invalid:invalid, error:error};\n}\n\n\nfunction validatePrice(value,max,min,status) {\n  let invalid=status.invalid;\n  let error=status.error;\n  let val_num = new Number(value);\n  //console.log(value,max,min,invalid,error);\n  if (value!==''){\n    invalid = !(value.match('[1-9]\\d*|0\\d+'));\n    error = invalid ? value+' is not a number.' : '';\n    if (val_num<=max && val_num >= min){\n      return {invalid:invalid, error:error};\n    }\n    else if (val_num>max) {\n      invalid = true;\n      error=value+' is over the maximum of '+max+' Ignis.';\n      return {invalid:invalid, error:error};\n    }\n    else if (val_num<min){\n      invalid = true;\n      error=value+' is below the minimum of '+min+' Ignis.';\n      return {invalid:invalid, error:error};\n    }\n  }\n  else {\n    invalid = false;\n    error = '';\n  }\n  return {invalid:invalid, error:error};\n}\n\n\nexport function validateUsername(value,status,userList){\n  let user_existing = userList.find((el)=> el === value);\n  let length = value.length;\n  if (user_existing){\n    return {invalid:true, error:\"User name is already taken\"};\n  }\n  else if (length === 0) {\n    return {invalid:true, error:\"User name can't be empty\"};\n  }\n  return {invalid:false, error:\"\"};\n}\n\n\nfunction validatePassPhrase(value,status,account){\n  let invalid=false;\n  let error=\"\"; \n  let accountFromPhrase = secretPhraseToAccountId(value,false);\n\n  if (accountFromPhrase != account){\n    invalid = true;\n    error = \"This pass phrase belongs to account \"+accountFromPhrase;\n    return {invalid:invalid, error:error};\n  }\n  else {\n    return {invalid:invalid, error:error};\n  }\n}\n\nexport function validatePhraseLength(value,status){\n  let invalid=status.invalid;\n  let error=status.error;\n\n  if (value!==''){\n    invalid = value.length<20;\n    error = invalid ? 'phrase looks too short.' : '';\n  }\n  else {\n    // case if field is empty\n    invalid = false;\n    error = '';\n  }\n  return {invalid:invalid, error:error};\n}\n\n\nfunction validateAddress(value,status){\n  let invalid=status.invalid;\n  let valid;\n  let error=status.error;\n  //console.log(value.match('^ARDOR-[A-Z0-9_]{4}-[A-Z0-9_]{4}-[A-Z0-9_]{4}-[A-Z0-9_]{5}'));\n  invalid = value.match('^ARDOR-[A-Z0-9_]{4}-[A-Z0-9_]{4}-[A-Z0-9_]{4}-[A-Z0-9_]{5}') ? false : true;\n  // -[A-Z0-9_]{4}-[A-Z0-9_]{4}-[A-Z0-9_]{4}-[A-Z0-9_]{5}\n  error = invalid ? \"this doesn't look like a valid ARDOR address.\" : '';\n  //console.log(value,invalid,error);\n  return({invalid:invalid,error:error});\n}\n\nfunction eqSet(userSet, collectionSet) {\n    //returns true if bs has all items of set as.\n    // eqSet(collection, user) to check if user has collection complete\n    for (var assetId of collectionSet) {\n      if (!userSet.has(assetId)) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction validateWinner(userAssets,collectionAssets){\n  // function to check if every asset of the collection exists at least once in\n  // the users' assets\n  const userSet = new Set(userAssets.map(asset=>{return asset.asset}));\n  const collectionSet = new Set(collectionAssets.map(asset=>{return asset.asset}));\n\n  const intersection = new Set([...userSet].filter(x => collectionSet.has(x)));\n\n  const sets_equal = eqSet(intersection,collectionSet);\n\n  const blockedAssets = [];\n  /*const blockedAssets = intersection.filter(function(asset) {\n    let unconfed = asset.unconfirmedQuantityQNT == 0;\n    let confed = asset.quantityQNT == 0;\n    return (confed | unconfed)\n  });*/\n\n  // difference between intersection (all user's cards) and collection\n  //let difference = new Set([...intersection].filter(x => !collectionSet.has(x)));\n  let difference = new Set([...collectionSet].filter(x => !intersection.has(x)));\n  // the difference are the missing cards.\n\n  return {complete:sets_equal,blockedAssets:blockedAssets,missingAssets:[...difference],totalNum:collectionAssets.length};\n}\n\nexport function validatePin(value, status){\n  let invalid=status.invalid;\n  let error=status.error;\n  \n  invalid = value.length < 4 ? true : false;\n  error = invalid ? \"too short\" : '';\n  return({invalid:invalid,error:error});\n}\n\nexport {validatePrice, validatePassPhrase, validateQuantity, validateAddress, validateWinner};\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\showqrcode.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\wallet.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\fundaccount.js",["274"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Link from '@material-ui/core/Link';\n\n\nfunction Iframe(props) {\n  return (<div dangerouslySetInnerHTML={ {__html:  props.iframe?props.iframe:\"\"}} />);\n}\n\nexport const FundAccount = ({name}) => {\n  //console.log(props);\n  return(\n    <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"540px\", display:\"inline-block\", paddingTop:40, paddingBottom:40}}>\n        <Grid container\n            justify=\"center\"\n            alignItems=\"stretch\"\n            direction=\"column\"\n            spacing={24}\n            className=\"boxed\"\n        >\n            <Grid item>\n                <Typography variant=\"h6\">Hey there, fund your account {name}!</Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"h4\">Monetary System Box</Typography>\n                <Typography variant=\"body1\">This will contain a simple interface to buy GIFTZ with Ignis.</Typography>\n                <Typography variant=\"body1\">Not yet implemented.</Typography>\n            </Grid>\n            <Grid item>\n                <Typography variant=\"h4\">Changelly</Typography>\n                   <Iframe iframe={'<iframe src=\"https://widget.changelly.com?from=*&to=ignis&amount=50&address=&fromDefault=eur&toDefault=ignis&theme=default&merchant_id=5zk2vil3u4s8witr&payment_id=&v=2\" width=\"100%\" height=\"600\" class=\"changelly\" scrolling=\"no\" style=\"min-width: 100%; width: 100px; overflow-y: hidden; border: none\">Cant load widget</iframe>'}/>                   \n            </Grid>\n        </Grid> \n    </div>\n  );\n}","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\carddetail.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\buypack.js",["275","276"],"import React, { Component } from 'react';\nimport {validatePassPhrase, validateQuantity} from '../common/validators';\nimport {sendIgnis,transferCurrency, transferCurrencyZeroFee} from '../common/ardorinterface';\nimport { SignActionField } from '../common/signactionfield';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport { Typography } from '@material-ui/core';\nimport { CURRENCY, NQTDIVIDER, MAXPACKS, PACKPRICEGIFTZ, PACKPRICE } from '../common/constants';\nimport { TxSuccess } from '../common/txsuccess';\n\n\n\nexport class BuyPack extends Component {\n  constructor (props){\n    super(props);\n    this.packPrice = PACKPRICE;\n    this.packPriceGiftz = PACKPRICEGIFTZ;\n    this.state = {\n      selectedCurrency: 'Ignis',\n      noPacks:1,\n      noPacksStatus:{invalid:false,error:''},\n      passPhrase:\"\",\n      passPhraseStatus:{invalid:undefined,error:''},\n      formValid:false,\n      bought:false,\n      responseTime:0\n    };\n    this.buyPack = this.buyPack.bind(this);\n    this.handlePassphraseChange = this.handlePassphraseChange.bind(this);\n    this.handleNoPacksChange = this.handleNoPacksChange.bind(this);\n    this.validateForm = this.validateForm.bind(this);\n  }\n\n  componentDidMount(){\n    let availableFunds = Math.min(this.props.wallet.balanceNQT,this.props.wallet.unconfirmedBalanceNQT);\n    let max= Math.min(((availableFunds/NQTDIVIDER)/PACKPRICE),MAXPACKS);\n    let min=1;\n    if (max<1.0){\n      this.setState(\n        {noPacks:this.state.noPacks},\n        ()=>{let fieldStatus = {invalid:true, error:\"Not enough funds to buy a pack\"};\n              this.setState({noPacksStatus:fieldStatus},this.validateForm);}\n      )\n    }\n    this.validateForm();\n  }\n\n  buyPack() {\n      var self = this;\n      let phraseValidated = validatePassPhrase(self.state.passPhrase,self.state.passPhraseStatus,self.props.user.accountRs);\n      if  (phraseValidated.invalid){\n        console.log(\"buyPack(): passphrase invalid, exiting.\")\n        self.setState({passPhraseStatus:phraseValidated},this.validateForm);\n        return;\n      }\n      console.log(\"buyPack(): passphrase ok.\")\n      const message = JSON.stringify({contract:\"IgnisAssetLottery\"});\n      if (this.state.selectedCurrency === 'Ignis'){\n        let amountNQT = this.state.noPacks*self.packPrice*NQTDIVIDER;\n        sendIgnis(this.props.nodeurl, amountNQT, this.props.collectionAccount, this.state.passPhrase, message, true)\n          .then(function(response){\n            console.log(response);\n            self.setState({response:response,responseTime:response.data.requestProcessingTime,bought:true,status:\"success\"});\n          })\n          .catch(function (error) {\n              console.log('ohje sendIgnis (from buyPack Dialog):');\n              console.log(error.message);\n              self.setState({status:\"ERROR\"})\n            });\n      }\n      else if (this.state.selectedCurrency === 'Giftz') {\n        let unitsQNT =this.state.noPacks*self.packPriceGiftz;\n        transferCurrency(this.props.nodeurl, this.props.collectionCurrency, unitsQNT, this.props.collectionIssuer, this.state.passPhrase, message, true)\n        .then(function(response){\n          console.log(response);\n          self.setState({response:response,responseTime:response.data.requestProcessingTime,bought:true,status:\"success\"});\n        })\n        .catch(function (error) {\n            console.log('ohje transferCurrency (from buyPack Dialog):');\n            console.log(error.message);\n            self.setState({status:\"ERROR\"})\n          });\n      }\n  }\n\n\n  validateForm() {\n    this.setState({formValid: (this.state.passPhraseStatus.invalid===false) && (this.state.noPacksStatus.invalid===false)});\n  }\n\n  handleNoPacksChange(event){\n    let value = event.target.value;\n    let availableFunds = Math.min(this.props.wallet.balanceNQT,this.props.wallet.unconfirmedBalanceNQT);\n    let max= Math.min(((availableFunds/NQTDIVIDER)/PACKPRICE),MAXPACKS);\n    let min=1;\n    if (max>=1.0){\n      this.setState(\n        {noPacks:value},\n        ()=>{let fieldStatus = validateQuantity(value,max,min,this.state.noPacksStatus);\n              this.setState({noPacksStatus:fieldStatus},this.validateForm);}\n      )\n    }\n    else {\n      this.setState(\n        {noPacks:value},\n        ()=>{let fieldStatus = {invalid:true, error:\"Not enough funds to buy a pack\"};\n              this.setState({noPacksStatus:fieldStatus},this.validateForm);}\n      )\n    }\n    this.setState({noPacks:event.target.value})    \n  }\n\n\n  handlePassphraseChange(event){\n    //let value = event.target.value;\n    let value = event;\n    this.setState(\n      {passPhrase:value},\n      ()=>{let fieldStatus = validatePassPhrase(value,this.state.passPhraseStatus);\n            this.setState({passPhraseStatus:fieldStatus},this.validateForm);}\n    );\n  }\n\n  toggler(props){\n    //this.setState({bought:false});\n    this.props.toggle(!this.props.modalOpen);\n  }\n\n  render(){\n    let totalPrice = this.state.noPacks*this.packPrice;\n    if (this.state.bought){\n      return (<TxSuccess/>)\n    }\n    else {\n      return (\n        <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"540px\", display:\"inline-block\", paddingTop: 40}}>\n          <form onSubmit={(event)=>{event.preventDefault();this.buyPack()}}>\n              <Grid container\n                justify=\"center\"\n                alignItems=\"stretch\" \n                direction=\"column\"\n                spacing={24}\n                className=\"boxed\"\n              >\n                <Grid item style={{textAlign:\"left\"}}>\n                  <Typography variant=\"display2\">Buy a pack of cards</Typography>\n                </Grid>\n                <Grid item style={{textAlign:\"left\"}}>\n                  <Typography variant=\"h6\">Pay with Ignis</Typography>\n                </Grid>\n                <Grid item>\n                  <TextField disabled\n                    id=\"game\"\n                    fullWidth\n                    label=\"Game Account\"\n                    helperText=\"The game's Ardor account ID\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    InputLabelProps={{\n                      readOnly: true,\n                      shrink: true,\n                    }}\n                    value={this.props.collectionAccount}\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField fullWidth\n                    id=\"outlined-number\"\n                    label=\"Number of packs\"\n                    value={this.state.noPacks}\n                    onChange={(event)=>this.handleNoPacksChange(event)}\n                    type=\"number\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    error={this.state.noPacksStatus.invalid}\n                    helperText={this.state.noPacksStatus.error}\n                  />\n                </Grid>\n                <Grid item style={{textAlign:\"left\"}}>\n                  <Typography variant=\"h6\">Total: {totalPrice} Ignis</Typography>\n                </Grid>\n                <Grid item>\n                  <SignActionField  {...this.props}\n                    {...this.state} \n                    handlePassphraseChange={this.handlePassphraseChange}\n                    action={this.buyPack}\n                  />\n                </Grid>\n              </Grid>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n\n\n\nexport class BuyPackCurrency extends Component {\n  constructor (props){\n    super(props);\n    this.packPrice = 26;\n    this.packPriceGiftz = 1;\n    this.state = {\n      noPacks:1,\n      noPacksStatus:{invalid:false,error:''},\n      passPhrase:\"\",\n      passPhraseStatus:{invalid:undefined,error:''},\n      formValid:false,\n      bought:false,\n      responseTime:0\n    };\n    this.buyPack = this.buyPack.bind(this);\n    this.handlePassphraseChange = this.handlePassphraseChange.bind(this);\n    this.handleNoPacksChange = this.handleNoPacksChange.bind(this);\n  }\n\n  componentDidMount(){\n    let availableGamma = Math.min(this.props.walletCurrency.unitsQNT,this.props.walletCurrency.unconfirmedUnitsQNT);\n    let max= Math.min(((availableGamma)/PACKPRICEGIFTZ),MAXPACKS);\n    let min=1;\n    if (max<1){\n      this.setState(\n        {noPacks:this.state.noPacks},\n        ()=>{let fieldStatus = {invalid:true, error:\"Not enough GIFTZ to buy a pack\"};\n        this.setState({noPacksStatus:fieldStatus},this.validateForm);}\n      )  \n    }\n    this.validateForm();\n  }\n\n  buyPack() {\n      var self = this;\n      let phraseValidated = validatePassPhrase(self.state.passPhrase,self.state.passPhraseStatus,self.props.user.accountRs);\n      if  (phraseValidated.invalid){\n        console.log(\"buyPack(): passphrase invalid, exiting.\")\n        self.setState({passPhraseStatus:phraseValidated},this.validateForm);\n        return;\n      }\n      console.log(\"buyPack(): passphrase ok.\")\n      const message = JSON.stringify({contract:\"IgnisAssetLottery\"});\n      let unitsQNT =this.state.noPacks*self.packPriceGiftz;\n      if (this.props.wallet.balanceNQT < 0.1*NQTDIVIDER){\n        transferCurrencyZeroFee(this.props.nodeurl, CURRENCY, unitsQNT, this.props.collectionAccount, this.state.passPhrase, message, true)\n        .then(function(response){\n          console.log(response);\n          self.setState({response:response,responseTime:response.data.requestProcessingTime,bought:true,status:\"success\"});\n        })\n        .catch(function (error) {\n            console.log('ohje transferCurrencyZeroFee (from buyPack Dialog):');\n            console.log(error.message);\n            self.setState({status:\"ERROR\"})\n          });\n      }\n      else {\n        transferCurrency(this.props.nodeurl, CURRENCY, unitsQNT, this.props.collectionAccount, this.state.passPhrase, message, true)\n        .then(function(response){\n          console.log(response);\n          self.setState({response:response,responseTime:response.data.requestProcessingTime,bought:true,status:\"success\"});\n        })\n        .catch(function (error) {\n            console.log('ohje transferCurrency (from buyPack Dialog):');\n            console.log(error.message);\n            self.setState({status:\"ERROR\"})\n        });\n      }\n  }\n\n\n  validateForm() {\n    this.setState({formValid: (this.state.passPhraseStatus.invalid===false) && (this.state.noPacksStatus.invalid===false)});\n  }\n\n  handleCurrencyChange(changeEvent) {\n    this.setState({\n      selectedCurrency: changeEvent.target.value\n    });\n  }\n\n  handleNoPacksChange(event){\n    let value = event.target.value;\n    let availableGamma = Math.min(this.props.walletCurrency.unitsQNT,this.props.walletCurrency.unconfirmedUnitsQNT);\n    let max= Math.min(((availableGamma)/PACKPRICEGIFTZ),MAXPACKS);\n    let min=1;\n    if (max>=1){\n      this.setState(\n        {noPacks:value},\n        ()=>{let fieldStatus = validateQuantity(value,max,min,this.state.noPacksStatus);\n              this.setState({noPacksStatus:fieldStatus},this.validateForm);}\n      )\n    }\n    else {\n      this.setState(\n        {noPacks:value},\n        ()=>{let fieldStatus = {invalid:true, error:\"Not enough GIFTZ to buy a pack\"};\n        this.setState({noPacksStatus:fieldStatus},this.validateForm);}\n      )\n    }\n    this.setState({noPacks:event.target.value})\n  }\n\n  handlePassphraseChange(event){\n    //let value = event.target.value;\n    let value = event;\n    this.setState(\n      {passPhrase:value},\n      ()=>{let fieldStatus = validatePassPhrase(value,this.state.passPhraseStatus);\n            this.setState({passPhraseStatus:fieldStatus},this.validateForm);}\n    );\n  }\n\n  toggler(props){\n    //this.setState({bought:false});\n    this.props.toggle(!this.props.modalOpen);\n  }\n\n  render(){\n    let totalPrice = this.state.noPacks*this.packPriceGiftz;\n    if (this.state.bought){\n      return (<TxSuccess/>)\n    }\n    else {\n      return (\n        <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"540px\", display:\"inline-block\", paddingTop: 40}}>\n          <form onSubmit={(event)=>{event.preventDefault();this.buyPack()}}>\n              <Grid container\n                justify=\"center\"\n                alignItems=\"stretch\" \n                direction=\"column\"\n                spacing={24}\n                className=\"boxed\"\n              >\n                <Grid item style={{textAlign:\"left\"}}>\n                  <Typography variant=\"display2\">Buy a pack of cards</Typography>\n                </Grid>\n                <Grid item style={{textAlign:\"left\"}}>\n                  <Typography variant=\"h6\">Pay with GIFTZ</Typography>\n                </Grid>\n                <Grid item>\n                  <TextField disabled\n                    id=\"game\"\n                    fullWidth\n                    label=\"Game Account\"\n                    helperText=\"The game's Ardor account ID\"\n                    margin=\"normal\"\n                    variant=\"outlined\"\n                    InputLabelProps={{\n                      readOnly: true,\n                      shrink: true,\n                    }}\n                    value={this.props.collectionAccount}\n                  />\n                </Grid>\n                <Grid item>\n                  <TextField fullWidth\n                    id=\"outlined-number\"\n                    label=\"Number of packs\"\n                    value={this.state.noPacks}\n                    onChange={(event)=>this.handleNoPacksChange(event)}\n                    type=\"number\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    margin=\"normal\"\n                    variant=\"outlined\" \n                    error={this.state.noPacksStatus.invalid}\n                    helperText={this.state.noPacksStatus.error}\n                  />\n                </Grid>\n                <Grid item style={{textAlign:\"left\"}}>\n                  <Typography variant=\"body1\">Total: {totalPrice} GIFTZ</Typography>\n                </Grid>\n\n                <Grid item>\n                  <SignActionField  {...this.props}\n                    {...this.state} \n                    handlePassphraseChange={this.handlePassphraseChange}\n                    action={this.buyPack}\n                  />\n                </Grid>\n              </Grid>\n          </form>\n        </div>\n      )\n    }\n  }\n}\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\monsterpage.js",["277","278","279"],"// MonsterPage\n\nimport React, { Component } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport {Link} from 'react-router-dom';\nimport Button from '@material-ui/core/Button';\n\nimport { fetchCard } from '../common/common';\nimport { CardImageNoButton, CardInfo } from '../common/cardinfo';\nimport monster from './monsters.json';\nimport { Hidden } from '@material-ui/core';\n\n\nfunction Iframe(props) {\n  return (<div dangerouslySetInnerHTML={ {__html:  props.iframe?props.iframe:\"\"}} />);\n}\n\nexport function MonsterInfo(props) {\n    const monster = props.monster;\n    return(\n        <div>\n          <Grid container\n            justify=\"center\"\n            direction=\"column\"\n            alignItems=\"stretch\"\n            spacing={24}\n          >\n            <Grid item style={{textAlign:\"left\"}}>\n              <Typography variant=\"body1\">{monster.continent} / {monster.country} / {monster.name}</Typography>\n              <Typography variant=\"display1\">Creature</Typography>\n              {\n                monster.creature.map((c,index)=>(<Typography key={index} variant=\"body1\">{c}</Typography>))\n              }\n              <img src={\"https://cards.tarasca.org/static/images/documentation/creatures/\"+monster.picture} alt=\"\"  style={{maxWidth:\"600px\",width:\"90%\"}}/>\n\n              <Typography variant=\"display1\">Culture</Typography>\n              {\n                monster.culture.map((c,index)=>(<Typography key={index} variant=\"body1\">{c}</Typography>))\n              }\n               <img src={\"https://cards.tarasca.org/static/images/documentation/landscapes/\"+monster.landscape} alt=\"\"  style={{maxWidth:\"600px\",width:'90%'}}/>\n            </Grid>\n          </Grid>\n        </div>\n    )\n}\n\nexport class MonsterPage extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n        card:{}\n    }\n    this.refresh = this.refresh.bind(this);\n    //console.log(monster);\n}\n\nrefresh(){\n    var self = this;\n    //console.log(this.props);\n    fetchCard(this.props.nodeurl,this.props.user.accountRs,this.props.match.params.asset)\n    .then((response)=>{\n      //console.log(response);\n      let card = response;\n      card.more =  monster.find((m)=>m.assetname === response.assetname); \n      //console.log(card.more);\n      self.setState({card:card});\n    })\n    .catch((err)=>{console.log(err)});\n}\n\n\ncomponentDidMount(){\n    this.refresh();\n    this.timer = setInterval(this.refresh,9000);\n  }\n\ncomponentWillUnmount(){\n    clearInterval(this.timer);\n}\n\n\n  render() {\n    const m = this.state.card.more == undefined ? {continent:\"\",country:\"\",culture:[],creature:[],maplink:\"\"} : this.state.card.more;\n    return (\n      <div style={{textAlign:\"center\", padding:20, width:\"90%\", display:\"inline-block\"}}>  \n        <Grid container spacing={24}\n            justify=\"center\"\n            alignItems=\"flex-start\"\n            direction=\"row\"\n        >\n            <Grid item>\n              <Grid container spacing={24}\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    direction=\"column\"\n                >\n                  <Grid item>\n                    <CardInfo card={this.state.card}/> \n                  </Grid>\n                  {/* <Grid item>\n                                <Link style={{textDecoration: 'none'}} to={\"/game/place/bid/\"+this.state.card.asset}>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}>Place a Buy Order (Bid)</Button>\n                                </Link>        \n                            </Grid>\n                            <Grid item>\n                                <Link style={{textDecoration: 'none'}} to={\"/game/place/ask/\"+this.state.card.asset}>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}>Offer this Card (Ask)</Button>\n                                </Link>        \n                            </Grid>\n                            <Grid item>\n                                <Link style={{textDecoration: 'none'}} to={\"/game/send/\"+this.state.card.asset}>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}> Send</Button>\n                                </Link>\n                            </Grid>\n                            <Grid item>\n                                <Link style={{textDecoration: 'none'}} to={\"/game/learnmore/\"+this.state.card.asset}>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}> Learn More</Button>\n                                </Link>\n                            </Grid> */}\n                  <Grid item>\n                    <CardImageNoButton card={this.state.card}/>                   \n                  </Grid>\n              </Grid>\n            </Grid>\n            <Grid item style={{maxWidth:\"600px\"}}>\n              <MonsterInfo monster={m}/>\n            </Grid>\n            <Grid item>\n              <Hidden smDown>\n                <Grid container\n                  justify=\"center\"\n                  direction=\"column\"\n                  spacing={24}\n                  >\n                    <Grid item>\n                      <Iframe iframe={m.maplink}/>\n                    </Grid>   \n                </Grid>\n              </Hidden>\n            </Grid>\n        </Grid>\n      </div>\n    )\n  }\n}","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\jackpot.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\tarasca.js",["280","281","282"],"import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\n\nimport { fetchCard } from '../common/common';\nimport { TARASCACARDASSET, NQTDIVIDER } from '../common/constants';\nimport {CardInfo, CardImageNoButton} from '../common/cardinfo';\nimport { getAskOrders, getBidOrders } from '../common/ardorinterface';\n\n\n\n\nexport class TarascaPage extends Component {\n    constructor(props){\n      super(props);\n      this.state = {\n        card:{quantityQNT:0},\n        selectedChannel:\"all\",\n        gotTarasca:false\n      }\n      this.refresh = this.refresh.bind(this); \n    }\n  \n    refresh(){\n      var self = this;\n      console.log(\"Tarasca: refresh\");\n      fetchCard(this.props.nodeurl,this.props.user.accountRs,TARASCACARDASSET)\n      .then(function(response){\n        self.setState({card:response});\n        let gotTarasca = response.quantityQNT > 0;\n        self.setState({gotTarasca:gotTarasca})        \n      })\n      .catch(function(error) {console.log(error)});\n    }\n  \n    componentDidMount(){\n      this.refresh()\n      this.timer = setInterval(this.refresh, 12000)\n    }\n\n    componentWillUnmount(){\n        console.log(\"Tarasca: stop refresh\");\n        clearInterval(this.timer);    \n    }\n\n    render(){\n        let posess = this.state.gotTarasca;\n        const out = this.state.gotTarasca ? (<TarascaCard/>) : (<NoTarascaCard/>);\n        return(\n            <div style={{textAlign:\"center\", padding:20, width:\"90%\", display:\"inline-block\"}}>  \n                <Grid container spacing={24}\n                        justify=\"center\"\n                        alignItems=\"stretch\"\n                        direction=\"column\">\n                    <Grid item>\n                        {this.state.gotTarasca ? (\n                                <Typography variant=\"display1\">You own the Tarasca Card</Typography>\n                            ) : (\n                                <Typography variant=\"display1\">You don't own the Tarasca Card</Typography>\n                            )} \n                    </Grid>\n                    <Grid item container spacing={24}\n                        justify=\"center\"\n                        alignItems=\"stretch\"\n                        direction=\"row\"\n                    >\n                        <Grid item className=\"boxed\" style={{marginTop: 10, marginBottom:10, backgroundColor:'rgb(16 57 43)', border:'1px solid', borderColor:'#ffffff3b'}}>\n                            <CardInfo card={this.state.card}/>\n                        </Grid>\n                        <Grid item>\n                            <CardImageNoButton card={this.state.card}/> \n                        </Grid>\n                        <Grid item className=\"boxed\" style={{marginTop: 10, marginBottom:10, backgroundColor:'rgb(16 57 43)', border:'1px solid', borderColor:'#ffffff3b'}}>\n                        {posess ?\n                            <Grid container spacing={24}\n                                justify=\"center\"\n                                alignItems=\"stretch\"\n                                direction=\"column\"\n                            >\n                                <Grid item>\n                                    <ExchangeData nodeurl={this.props.nodeurl} card={this.state.card}/>\n                                </Grid>\n                                <Grid item>\n                                    <Link style={{textDecoration: 'none'}} to={\"/game/place/bid/\"+this.state.card.asset}>\n                                        <Button fullWidth variant=\"outlined\" disabled={!posess}>Place a Buy Order (Bid)</Button>\n                                    </Link>        \n                                </Grid>\n                                <Grid item>\n                                    <Link style={{textDecoration: 'none'}} to={\"/game/place/ask/\"+this.state.card.asset}>\n                                        <Button fullWidth variant=\"outlined\" disabled={!posess}>Offer this Card (Ask)</Button>\n                                    </Link>        \n                                </Grid>\n                                <Grid item>\n                                    <Link style={{textDecoration: 'none'}} to={\"/game/send/\"+this.state.card.asset}>\n                                        <Button fullWidth variant=\"outlined\" disabled={!posess}> Send</Button>\n                                    </Link>\n                                </Grid>\n                                <Grid item>\n                                    <Link style={{textDecoration: 'none'}} to={\"/game/learnmore/\"+this.state.card.asset}>\n                                        <Button fullWidth variant=\"outlined\" disabled={!posess}> Learn More</Button>\n                                    </Link>\n                                </Grid>\n                            </Grid>\n                            :\n                            <Grid container spacing={24}\n                                justify=\"center\"\n                                alignItems=\"stretch\"\n                                direction=\"column\"\n                            >\n                                <Grid item>\n                                    <ExchangeData nodeurl={this.props.nodeurl} card={this.state.card}/>\n                                </Grid>\n                                <Grid item>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}>Place a Buy Order (Bid)</Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}>Offer this Card (Ask)</Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}> Send</Button>\n                                </Grid>\n                                <Grid item>\n                                    <Button fullWidth variant=\"outlined\" disabled={!posess}> Learn More</Button>\n                                </Grid>\n                            </Grid>\n                        }\n                        </Grid>\n                    </Grid>\n                    <Grid item>\n                        {out}\n                    </Grid>\n                </Grid>\n            </div>\n        )\n    }\n}\n\n\n\nexport const NoTarascaCard = (props) => {\n    return (\n        <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"540px\", display:\"inline-block\"}}>\n            <Grid container\n                justify=\"center\"\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={24}\n                style={{maxWidth:540}}\n            >\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        You don't posess a Tarasca Card.\n                    </Typography>\n                    <Typography variant=\"body2\">\n                        This is a special card that some get when they won the jackpot. It is very rare! \n                        You need to claim the jackpot, there are XYZ more Tarasca Cards available! \n                        Alternatively you can bid for one on the <Link style={{color:\"inherit\"}} to=\"/game/exchange\">Exchange</Link>.\n                    </Typography>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\n\nexport const TarascaCard = (props) => {\n    return (\n        <div style={{textAlign:\"center\", padding:20, width:\"90%\", maxWidth:\"540px\", display:\"inline-block\"}}>\n            <Grid container\n                justify=\"center\"\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={24}\n                style={{maxWidth:540}}\n            >\n                <Grid item>\n                    <Typography variant=\"body2\">\n                        You posess a Tarasca Card! It is a very rare card, and every holder is receiving a share of the card sales.\n                    </Typography>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\n\n\nclass ExchangeData extends Component {\n    constructor(props) {\n      super(props);\n      this.state={\n        modalSend:false,\n        modalTrade:false,\n        bidOrders:[],\n        askOrders:[]\n      }\n      this.refresh = this.refresh.bind(this);\n    }\n  \n    refresh(){\n      var self = this;\n      getAskOrders(this.props.nodeurl,TARASCACARDASSET)\n      .then((response) => {\n        self.setState({askOrders:response.askOrders});\n      });\n      getBidOrders(this.props.nodeurl,TARASCACARDASSET)\n      .then((response) => {\n        self.setState({bidOrders:response.bidOrders});\n      });\n    }\n  \n    componentDidMount(){\n      this.refresh();\n      this.timer = setInterval(this.refresh,5000);\n    }\n  \n    componentWillUnmount(){\n      clearInterval(this.timer);\n    }\n  \n    render() {\n        const numColumnStyle = { width: 12};\n        const ask = this.state.askOrders.length === 0 ? \"/\" \n                                : this.state.askOrders[0].priceNQTPerShare/NQTDIVIDER;\n        const bid = this.state.bidOrders.length === 0 ? \"/\" \n                                : this.state.bidOrders[0].priceNQTPerShare/NQTDIVIDER;\n        const quant = this.props.card.quantityQNT > this.props.card.unconfirmedQuantityQNT ? this.props.card.quantityQNT \n                                : this.props.card.unconfirmedQuantityQNT;\n        return (\n            <Grid container\n                justify=\"center\"\n                direction=\"column\"\n                alignItems=\"stretch\"\n                spacing={24}\n                >\n\n                <Grid item>\n                    <Typography variant='h4'>\n                        Current ask price\n                    </Typography>\n                    <Typography variant='h6'>\n                        {ask}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant='h4'>\n                        Current bid price\n                    </Typography>\n                    <Typography variant='h6'>\n                        {ask}\n                    </Typography>\n                </Grid>\n            </Grid>\n        );\n    }\n  }\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cancel.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\exchange.js",["283"],"import React, {Component} from 'react';\nimport { fetchCards } from '../common/common';\nimport { CardRowDisplay, CardRowDisplayMobile } from './cardrowdisplay';\nimport {AccountOrderBook} from './accountorderbook';\nimport {Filter} from '../carddeck/filter';\n\nimport Table from '@material-ui/core/Table';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableBody from '@material-ui/core/TableBody';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport { Hidden } from '@material-ui/core';\nimport { TradesHistory } from './trades';\n\n\nexport class Exchange extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cards:[],\n      selectedChannel:\"all\",\n      slideIndex:0\n    }\n    this.refresh = this.refresh.bind(this); \n  }\n\n  refresh(){\n    var self = this;\n    console.log(\"Exchange: refresh\");\n    fetchCards(this.props.nodeurl,this.props.user.accountRs,this.props.collectionAccount)\n    .then(function(response){\n      self.setState({cards:response});\n    })\n    .catch(function(error) {console.log(error)});\n  }\n\n  componentDidMount(){\n    this.refresh()\n    this.timer = setInterval(this.refresh, 12000)\n  }\n\n  componentWillUnmount(){\n    console.log(\"Exchange: stop refresh\");\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const numColumnStyle = { width: 12};\n    let channels = new Set(this.state.cards.map((card) => {return card.channel}))\n    let cards = []\n    if (this.state.selectedChannel !== \"all\") {\n      cards = this.state.cards.filter((card) => (card.channel === this.state.selectedChannel));\n    }\n    else {\n      cards = this.state.cards;\n    } \n    const max = cards.length;\n    \n    return (\n      <div style={{textAlign:\"center\", padding:20, width:\"90%\", display:\"inline-block\"}}>\n        <Grid container\n          justify=\"center\"\n          alignItems=\"stretch\"\n          direction=\"column\"\n          spacing={24}\n        >\n          <Grid item>\n            <Typography variant=\"h2\">Exchange</Typography>\n          </Grid>\n          <Grid item>\n            <Filter channels={[...channels]} onClick={(chan)=>this.setState({selectedChannel:chan})} />\n          </Grid>\n          <Grid item style={{marginTop:20}}>\n            <Grid container\n              justify=\"space-between\"\n              alignItems=\"flex-start\"\n              direction=\"row\"\n              spacing={24}\n            >\n              <Grid item className=\"boxed\" style={{border:'1px solid', borderColor:'#ffffff3b'}}>\n                <Typography variant=\"h3\" style={{marginBottom:20}}>Market</Typography>    \n                <Hidden xsDown>        \n                  <Table padding=\"dense\">\n                    <TableHead>\n                      <TableRow>\n                        <TableCell></TableCell>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Amount</TableCell>\n                        <TableCell style={numColumnStyle}>Lowest Ask </TableCell>\n                        <TableCell style={numColumnStyle}>Highest Bid</TableCell>\n                      </TableRow>\n                    </TableHead>\n                    <TableBody>\n                      {\n                        cards != null ? (\n                          cards.map(\n                            (card, index) => (\n                              (this.props.showAllCards | (card.quantityQNT > 0)) ? (\n                                <CardRowDisplay key={index} card={card} {...this.props}/>                                    \n                              ): (null)\n                            )\n                          )\n                        ): null\n                      }    \n                    </TableBody>\n                  </Table>\n                </Hidden>\n                <Hidden smUp>\n                  <Grid container direction=\"column\" spacing={24}>\n                    {\n                      cards != null ? (\n                        cards.map(\n                          (card, index) => (\n                            (this.props.showAllCards | (card.quantityQNT > 0 )) ? (\n                              <CardRowDisplayMobile key={index} card={card} {...this.props}/>\n                            ):(null)\n                          )\n                        )\n                      ): null\n                    }\n                  </Grid>\n                </Hidden>\n              </Grid>\n              <Grid item className=\"boxed\" style={{border:'1px solid', borderColor:'#ffffff3b'}}>\n                <Typography variant=\"h3\">Your Orders</Typography>\n                <AccountOrderBook cards={cards} {...this.props}/>\n              </Grid>\n              <Grid item className=\"boxed\" style={{border:'1px solid', borderColor:'#ffffff3b'}}>\n                <Typography variant=\"h3\">Your Last Trades</Typography>\n                <TradesHistory {...this.props} />\n              </Grid>\n            </Grid>            \n          </Grid>\n        </Grid>\n      </div>\n    );\n  }  \n}\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardorder.js",["284"],"import React, { useState } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Chip from '@material-ui/core/Chip';\n\nimport {PlaceAskOrder} from './cardaskorder';\nimport {PlaceBidOrder} from './cardbidorder';\nimport {OrderBooks} from './orderbook';\n\n\nexport function PlaceOrder(props){\n  const [orderType, setOrder] = useState(props.match.params.type);\n  return ( \n    <div style={{textAlign:\"center\", padding:20, width:\"90%\", display:\"inline-block\"}}>\n      <Grid container spacing={24}\n        justify=\"center\"\n        alignItems=\"center\"\n        direction=\"column\"\n      >\n        <Grid item>\n          <Grid container \n                spacing={16}\n                justify=\"center\"\n                alignItems=\"center\"\n          >\n            <Grid item>\n              <Chip label=\"Ask\" onClick={()=>setOrder(\"ask\")} variant=\"outlined\" style={orderType === 'ask'? { paddingRight:40, paddingLeft:40 ,backgroundColor:'#484848'} : { paddingRight:40, paddingLeft:40}}/>\n            </Grid>\n            <Grid item>\n              <Chip label=\"Bid\" onClick={()=>setOrder(\"bid\")} variant=\"outlined\" style={orderType === 'bid'? { paddingRight:40, paddingLeft:40 ,backgroundColor:'#484848'} : { paddingRight:40, paddingLeft:40}}/>\n            </Grid>\n          </Grid>\n        </Grid>\n        <Grid item>\n            {orderType===\"ask\" ? <PlaceAskOrder {...props}/> : <PlaceBidOrder {...props}/>}\n        </Grid>\n        {/* <Grid item>\n          <OrderBooks {...props}/>\n        </Grid> */}\n      </Grid>\n    </div>\n  );\n}\n\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\signactionfield.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\txsuccess.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\cardinfo.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\confirmdialog.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\common\\backbutton.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\login\\generatePassphrase.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\trades.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardaskorder.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\orderbook.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardbidorder.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\filter.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\accountorderbook.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\countdown.js",["285"],"// countdown\n\nimport React, { Component } from 'react';\n\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\n\nimport {getBlockchainStatus} from '../common/ardorinterface';\nimport {FREQUENCY, BLOCKTIME} from '../common/constants';\n\n\nexport class CountDown extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            blockChainStatus:{numberOfBlocks:FREQUENCY},\n            timer:BLOCKTIME\n        }\n        this.refresh=this.refresh.bind(this);\n    }\n\n    componentDidMount(){\n        var self = this;\n        self.refresh();\n        console.log(\"CountDown: start refresh\");\n        self.timer = setInterval(self.refresh,1000);        \n    }\n\n    componentWillUnmount(){\n        console.log(\"CountDown: stop refresh\");\n        clearInterval(this.timer);\n        clearInterval(this.timerTimer);\n    }\n\n    refresh(){\n        var self = this;\n\n        let prev_timer = self.state.timer;\n        self.setState({timer:prev_timer-1});\n\n        getBlockchainStatus(this.props.nodeurl)\n        .then((response)=>{\n            let prev_height = self.state.blockChainStatus.numberOfBlocks;\n            if (prev_height != response.data.numberOfBlocks) {\n                self.setState({timer:BLOCKTIME})                \n            }\n            self.setState({blockChainStatus:response.data});\n        })\n        .catch((error)=>{console.log(error);})\n\n    }\n\n    render(){\n        const modulo = this.state.blockChainStatus.numberOfBlocks%FREQUENCY;\n        const remainingBlocks = FREQUENCY - modulo;\n        const remainingSecs = remainingBlocks * BLOCKTIME;\n\n        \n        const delta = remainingSecs-(BLOCKTIME - this.state.timer);\n        const days = Math.floor(delta/(60*60*24));\n        var date = new Date(null);\n        date.setSeconds(delta); // specify value for SECONDS here\n        var result = date.toISOString().substr(11, 8);\n\n        return (\n            <Grid container spacing={8}\n                justify=\"center\"\n                alignItems=\"center\"\n                direction=\"column\"\n                className=\"boxed\"\n                style={{border:'1px solid', borderColor:'#ffffff3b'}}\n            >\n                <Grid item>\n                    <Typography variant=\"h3\">Countdown</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"h5\">until next distribution</Typography>\n                </Grid>\n                <Grid item>\n                    <Typography variant=\"display2\">\n                    {days.toString().padStart(2,'0')}:{result}\n                    </Typography>\n                    <Typography variant=\"body1\">\n                        (dd:hh:mm:ss)\n                    </Typography>                    \n                </Grid>\n                <Grid item> \n                    <Typography variant=\"h4\" style={{textAlign:'center'}}>Remaining Blocks</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"display1\">{remainingBlocks}</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"h4\" style={{textAlign:'center'}}>Time to next Block</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"display1\">{this.state.timer} secs</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"h4\" style={{textAlign:'center'}}>Jackpot Block</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"display1\">{this.state.blockChainStatus.numberOfBlocks+remainingBlocks}</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"h4\" style={{textAlign:'center'}}>Current Height</Typography>\n                </Grid>\n                <Grid item> \n                    <Typography variant=\"display1\">{this.state.blockChainStatus.numberOfBlocks}</Typography>\n                </Grid>\n            </Grid>\n        )\n    }\n}\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\claim.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\cardrowdisplay.js",["286"],"import React, {Component} from 'react';\nimport { getAskOrders, getBidOrders } from '../common/ardorinterface';\nimport { NQTDIVIDER } from '../common/constants';\n\nimport TableRow from '@material-ui/core/TableRow';\nimport TableCell from '@material-ui/core/TableCell';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport {Link} from 'react-router-dom';\nimport { ThumbExchangeRow } from '../carddeck/thumb';\nimport Grid from '@material-ui/core/Grid';\nimport { Divider } from '@material-ui/core';\n\n\nexport class CardRowDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      modalSend:false,\n      modalTrade:false,\n      bidOrders:[],\n      askOrders:[]\n    }\n    this.refresh = this.refresh.bind(this);\n  }\n\n  refresh(){\n    var self = this;\n    getAskOrders(this.props.nodeurl,this.props.card.asset)\n    .then((response) => {\n      self.setState({askOrders:response.askOrders});\n    });\n    getBidOrders(this.props.nodeurl,this.props.card.asset)\n    .then((response) => {\n      self.setState({bidOrders:response.bidOrders});\n    });\n  }\n\n  componentDidMount(){\n    this.refresh();\n    this.timer = setInterval(this.refresh,9000);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const numColumnStyle = { width: 12};\n// style={{padding:\"8px\", textAlign:\"center\"}}\n// style={{padding:\"8px\"}}\n    const ask = this.state.askOrders.length === 0 ? \"/\" \n                          : this.state.askOrders[0].priceNQTPerShare/NQTDIVIDER;\n    const bid = this.state.bidOrders.length === 0 ? \"/\" \n                          : this.state.bidOrders[0].priceNQTPerShare/NQTDIVIDER;\n    const quant = this.props.card.quantityQNT > this.props.card.unconfirmedQuantityQNT ? this.props.card.quantityQNT \n                          : this.props.card.unconfirmedQuantityQNT;\n    return (\n      <TableRow>\n        <TableCell>\n          <Link style={{textDecoration:\"none\"}} to={\"/game/card/\"+this.props.card.asset}>\n            <ThumbExchangeRow card={this.props.card}></ThumbExchangeRow>\n          </Link>\n        </TableCell>\n        <TableCell ><Typography variant=\"h6\" align=\"left\">{this.props.card.name} ({this.props.card.channel})</Typography></TableCell>\n        <TableCell><Typography variant=\"body1\">{quant}</Typography></TableCell>\n        <TableCell style={numColumnStyle}><Link to={\"/game/place/bid/\"+this.props.card.asset}><Button variant=\"text\">{ask}</Button></Link></TableCell>\n        <TableCell style={numColumnStyle}><Link to={\"/game/place/ask/\"+this.props.card.asset}><Button variant=\"text\">{bid}</Button></Link></TableCell>\n      </TableRow>\n    );\n  }\n}\n\n\nexport class CardRowDisplayMobile extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      modalSend:false,\n      modalTrade:false,\n      bidOrders:[],\n      askOrders:[]\n    }\n    this.refresh = this.refresh.bind(this);\n  }\n\n  refresh(){\n    var self = this;\n    getAskOrders(this.props.nodeurl,this.props.card.asset)\n    .then((response) => {\n      self.setState({askOrders:response.askOrders});\n    });\n    getBidOrders(this.props.nodeurl,this.props.card.asset)\n    .then((response) => {\n      self.setState({bidOrders:response.bidOrders});\n    });\n  }\n\n  componentDidMount(){\n    this.refresh();\n    this.timer = setInterval(this.refresh,9000);\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.timer);\n  }\n\n  render() {\n    const numColumnStyle = { width: 12};\n    const ask = this.state.askOrders.length === 0 ? \"/\" \n                          : this.state.askOrders[0].priceNQTPerShare/NQTDIVIDER;\n    const bid = this.state.bidOrders.length === 0 ? \"/\" \n                          : this.state.bidOrders[0].priceNQTPerShare/NQTDIVIDER;\n    const quant = this.props.card.quantityQNT > this.props.card.unconfirmedQuantityQNT ? this.props.card.quantityQNT \n                          : this.props.card.unconfirmedQuantityQNT;\n    return (\n      <Grid item xs={12}>\n        <Grid container direction=\"row\" alignItems=\"flex-start\" justify=\"center\" spacing={8}>\n          <Grid item xs={4} md={2}>\n            <Link style={{textDecoration:\"none\"}} to={\"/game/card/\"+this.props.card.asset}>\n              <ThumbExchangeRow card={this.props.card}></ThumbExchangeRow>\n            </Link>\n          </Grid>\n          <Grid item xs={8} md={10}>\n            <Grid container direction=\"row\">\n              <Grid item xs={12}>\n              <Typography variant=\"h6\" align=\"left\">{this.props.card.name} ({this.props.card.channel})</Typography>\n              <Typography variant=\"body1\" align=\"left\">Amount: {quant}</Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" align=\"center\">\n                <Link to={\"/game/place/bid/\"+this.props.card.asset}><Button variant=\"outlined\">Ask: {ask}</Button></Link>\n              </Typography>\n            </Grid>\n            <Grid item xs={6}>\n              <Typography variant=\"body1\" align=\"center\">\n                <Link to={\"/game/place/ask/\"+this.props.card.asset}><Button variant=\"outlined\">Bid: {bid} </Button></Link>\n              </Typography>\n              \n            </Grid>\n          </Grid>\n        </Grid>\n        </Grid>\n        <Divider variant=\"middle\" />\n      </Grid>\n    );\n  }\n}","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\progress.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\carddeck.js",["287","288","289"],"import React, {Component} from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Hidden from '@material-ui/core/Hidden';\nimport { fetchCards } from '../common/common';\nimport {CardDisplay} from './carddisplay';\nimport Slider from 'react-slick';\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { Thumb, ThumbMobile } from './thumb';\nimport {Filter} from './filter';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n\n\nfunction ThumbsList({cards, slider}){\n  if(cards == null) {\n    return null;\n  }\n  else {\n    return (\n      <Grid container\n        justify=\"center\"\n        direction=\"row\"\n        alignItems=\"flex-start\"\n        spacing={8}\n      >\n      {cards.map(\n        (card, index) => (\n          <Grid item key={index} xs={6} sm={4} md={2} lg={1}>\n          <Thumb card={card} index={index} width=\"80px\"\n            onClick={slider ? slider.slickGoTo:undefined}/>\n          </Grid>\n        )\n      )}\n      </Grid>\n    );\n  }\n}\n\nfunction ThumbsListMobile({cards, history}){\n  if(cards == null) {\n    return null;\n  }\n  else {\n    return (\n      <Grid container\n        justify=\"center\"\n        direction=\"row\"\n        alignItems=\"flex-start\"\n        spacing={8}\n      >\n      {cards.map(\n        (card, index) => (\n          <Grid item key={index} xs={6} sm={4} md={2} lg={1}>\n          <ThumbMobile card={card} index={index} \n            onClick={()=>history.push('/game/card/'+card.asset)}/>\n          </Grid>\n        )\n      )}\n      </Grid>\n    );\n  }\n}\n\n\nexport class CardDeck extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cards:[],\n      selectedChannel:\"all\",\n      slideIndex:0\n    }\n    this.refresh = this.refresh.bind(this);    \n  }\n\n  refresh(){\n    var self = this;\n    console.log(\"CardDeck: refresh: fetching cards\");\n    fetchCards(this.props.nodeurl,this.props.user.accountRs,this.props.collectionAccount)\n    .then(function(response){\n      self.setState({cards:response});\n    })\n    .catch(function(error) {console.log(error)});\n  }\n\n  componentDidMount(){\n    this.refresh()\n    this.timer = setInterval(this.refresh, 8000)\n  }\n  \n  componentWillUnmount(){\n    console.log(\"CardDeck: stop refresh\");\n    clearInterval(this.timer);\n  }\n\n  render() {\n    let channels = new Set(this.state.cards.map((card) => {return card.channel}))\n    let cards = []\n    if (this.state.selectedChannel !== \"all\") {\n      cards = this.state.cards.filter((card) => (card.channel === this.state.selectedChannel) & (this.props.showAllCards | (card.quantityQNT > 0)));\n    }\n    else {\n      cards = this.state.cards.filter((card) => (this.props.showAllCards | (card.quantityQNT > 0)));\n    } \n    const max = cards.length;\n    var settings = {\n      dots: true,\n      className: \"center\",\n      speed: 500,\n      centerMode: false,\n      centerPadding: \"60px\",\n      slidesToShow: 5<=max ? 5:max,\n      slidesToScroll: 5,\n      beforeChange: (current, next) => this.setState({slideIndex:next}),\n      responsive: [\n        {\n          breakpoint: 1920,\n          settings: {\n            slidesToShow: 5<=max ? 5:max,\n            //slidesToScroll: 5<=max ? 5:max\n            slidesToScroll: 1\n          }\n        },{\n          breakpoint: 1670,\n          settings: {\n            slidesToShow: 3<=max ? 3:max,\n            //slidesToScroll: 5<=max ? 5:max\n            slidesToScroll: 1\n          }\n        },{\n          breakpoint: 1280,\n          settings: {\n            slidesToShow: 3<=max ? 3:max,\n            //slidesToScroll: 3<=max ? 3:max\n            slidesToScroll: 1\n          }\n        },{\n          breakpoint: 960,\n          settings: {\n            slidesToShow: 3,\n            slidesToScroll: 1\n          }\n        }\n      ]\n    };\n    return (\n        <div style={{display:\"block\", textAlign:\"center\", width:\"100%\", padding:20}}>\n          <Filter channels={[...channels]} onClick={(chan)=>this.setState({selectedChannel:chan})} />\n          <div style={{width:\"90%\",marginLeft:\"auto\",marginRight:\"auto\"}}>\n            <Hidden smDown>\n              <div style={{width:\"100%\",padding:20}}>\n                <Slider {...settings} arrows={true} ref={slider=>(this.slider = slider)}>\n                  {\n                    cards != null ? (\n                      cards.map(\n                        (card, index) => (\n                          <CardDisplay key={index} card={card} {...this.props}/>\n                        )\n                      )\n                    ): null\n                  }\n                </Slider>\n              </div>\n              <div style={{width:\"90%\",marginLeft:\"auto\",marginRight:\"auto\"}}>\n                <ThumbsList cards={cards} slider={this.slider}/>\n              </div>\n            </Hidden>\n          </div>\n          <Hidden mdUp>\n            <div style={{width:\"95%\",marginLeft:\"auto\",marginRight:\"auto\"}}>\n              <ThumbsListMobile cards={cards} {...this.props}/>\n            </div>\n          </Hidden>\n        </div>\n    );\n  }  \n}\n\n","C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\wallet\\newuser.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\exchange\\accountordertable.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\thumb.js",[],"C:\\Users\\danie\\Desktop\\React App\\my-app\\src\\carddeck\\carddisplay.js",["290","291","292","293"],"import React, { Fragment, Component } from 'react';\n//import {Card, CardImg, CardBody, CardHeader,Button} from 'reactstrap';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport Collapse from '@material-ui/core/Collapse';\nimport Menu from '@material-ui/core/Menu';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\n\nimport { withStyles } from '@material-ui/core/styles';\nimport { getAskOrders, getBidOrders } from '../common/ardorinterface';\nimport { Link } from 'react-router-dom';\n\n\nconst styles = theme => ({\n  paper: {\n    position: 'absolute',\n    width: theme.spacing.unit * 50,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing.unit * 4,\n    outline: 'none',\n  },\n  image: {\n    height:450,\n    width:300,\n    display:\"block\",\n    zIndex:-1,\n  },\n  container:{\n    position:\"relative\",\n    maxWidth:300,\n    height:450,\n    width:300,\n  },\n  overlay: {\n    opacity: 0.9,\n    height: \"100%\",\n    width: \"100%\",\n    top: 0,\n    left: 0,\n    position:\"absolute\",\n    zIndex:1000,\n    backgroundColor:\"black\",\n    padding: \"150px 0\"\n  },\n  media: {\n    height: 450,\n    width:300,\n  },\n  card: {\n    maxWidth:300,\n  }, \n  badge: {\n    top:20,\n    right: 20\n  }\n});\n\n\nclass CardDisplay_ extends Component {\n  constructor(props) {\n    super(props);\n    this.state={\n      modalSend:false,\n      modalTrade:false,\n      bidOrders:[],\n      askOrders:[],\n      anchorEl:null,\n      currentName:\"ignis_balance\",\n    }\n  }\n\n  handleClick = event => {\n    this.setState({ anchorEl: event.currentTarget, currentName:event.currentTarget.name });\n  };\n\n  handleClose = () => {\n    this.setState({ anchorEl: null });\n  };\n\n  toggleSend() {\n    this.setState({modalSend:!this.state.modalSend})\n  }\n\n  toggleTrade = () => (this.setState({modalTrade:!this.state.modalTrade}))\n\n  componentDidMount(){\n    var self = this;\n    getAskOrders(this.props.nodeurl,this.props.card.asset)\n    .then((response) => {\n      self.setState({askOrders:response.askOrders});\n    });\n    getBidOrders(this.props.nodeurl,this.props.card.asset)\n    .then((response) => {\n      self.setState({bidOrders:response.bidOrders});\n    });\n  }\n        \n//<Badge className={classes.badge} badgeContent={card.quantityQNT} color=\"secondary\" showZero>\n              \n  render() {\n    const posess = this.props.card.quantityQNT > 0;\n    console.log(this.props.card,'nfjansfajsifnas')\n    const {card, classes} = this.props;\n    const {anchorEl, currentName} = this.state;\n    // console.log(card,'maifnoifmasoifk')\n    return (\n      <Card className=\"boxed\" className={classes.card} style={{ marginBottom:20, backgroundColor:'rgb(16 57 43)', border:'1px solid', borderColor:'#ffffff3b'}}>\n        <CardHeader\n          avatar={\n            <Avatar aria-label=\"recipe\" className={classes.avatar}>\n              {card.quantityQNT}\n            </Avatar>\n          }\n          action={\n            posess?\n            <IconButton aria-label=\"settings\" name=\"settings\" onClick={this.handleClick}>\n              <MoreVertIcon />\n            </IconButton> : null\n          }\n          title={card.name}\n          subheader={card.channel}\n          titleTypographyProps={{variant:'h6'}}\n          style={{textAlign:'left'}}\n        />\n        { posess ? (\n                <CardMedia className={classes.image} image={card.cardImgUrl} title={card.name} onClick={()=>{this.props.history.push(\"/game/card/\"+card.asset)}}/>\n            \n          ):(\n            <div className={classes.container}>\n              <CardMedia className={classes.image} image={card.cardImgUrl} title={card.name}/>\n              <div className={classes.overlay} style={{backgroundColor: '#333333'}}>\n                <Typography variant='h4' style={{paddingBottom:10}}>Missing Card</Typography>\n                <Link to={\"/game/place/bid/\"+card.asset} style={{textDecoration:'none'}}>\n                  <Button variant=\"outlined\">Look for Offers</Button>\n                </Link>\n              </div>\n            </div>\n          )\n        }\n        {/* <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {card.name}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Amount : {card.quantityQNT}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Continent : {card.channel}\n          </Typography>\n        </CardContent> */}\n        {/* <CardActions style={{justifyContent: 'center', marginBottom:10, marginTop:10}}>\n          <Link disabled={!posess} to={\"/game/place/ask/\"+card.asset} style={{textDecoration:'none'}}>\n            <Button variant=\"outlined\" disabled={!posess}>Trade</Button>\n          </Link>        \n          <Link disabled={!posess} to={\"/game/send/\"+card.asset} style={{marginRight:10,marginLeft:10,textDecoration:'none'}}>\n            <Button variant=\"outlined\" disabled={!posess}>Send</Button>\n          </Link>\n          <Link disabled={!posess} to={\"/game/card/\"+card.asset} style={{textDecoration:'none'}}>\n            <Button variant=\"outlined\" disabled={!posess}>More</Button>\n          </Link>\n        </CardActions> */}\n        <Menu\n          id=\"account-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={this.handleClose}\n        >\n          {currentName===\"settings\" && posess?\n            (<Fragment>\n              <Link className={classes.link} to={\"/game/place/ask/\"+card.asset} style={{textDecoration: 'none'}}>\n                <ListItem button key=\"Trade\" onClick={this.handleClose}>\n                  <ListItemText primary=\"Trade\" />\n                </ListItem>\n              </Link>\n              <Link className={classes.link} to={\"/game/send/\"+card.asset} style={{textDecoration: 'none'}}>\n                <ListItem button key=\"Send\" onClick={this.handleClose}>\n                    <ListItemText primary=\"Send\" />              \n                </ListItem>\n              </Link>\n              <Link className={classes.link} to={\"/game/card/\"+card.asset} style={{textDecoration: 'none'}}>\n                <ListItem button key=\"More\" onClick={this.handleClose}>\n                  <ListItemText primary=\"More\" />\n                </ListItem>\n              </Link>\n            </Fragment>)\n            : null\n          }\n        </Menu>\n      </Card>\n    );\n  }\n}\n\nexport const CardDisplay = withStyles(styles)(CardDisplay_);",{"ruleId":"294","replacedBy":"295"},{"ruleId":"296","replacedBy":"297"},{"ruleId":"298","severity":1,"message":"299","line":184,"column":35,"nodeType":"300","messageId":"301","endLine":184,"endColumn":37},{"ruleId":"302","severity":1,"message":"303","line":419,"column":77,"nodeType":"304","messageId":"305","endLine":419,"endColumn":89},{"ruleId":"302","severity":1,"message":"306","line":4,"column":20,"nodeType":"304","messageId":"305","endLine":4,"endColumn":36},{"ruleId":"302","severity":1,"message":"307","line":4,"column":38,"nodeType":"304","messageId":"305","endLine":4,"endColumn":61},{"ruleId":"302","severity":1,"message":"308","line":12,"column":21,"nodeType":"304","messageId":"305","endLine":12,"endColumn":29},{"ruleId":"302","severity":1,"message":"309","line":20,"column":8,"nodeType":"304","messageId":"305","endLine":20,"endColumn":17},{"ruleId":"302","severity":1,"message":"310","line":2,"column":17,"nodeType":"304","messageId":"305","endLine":2,"endColumn":25},{"ruleId":"302","severity":1,"message":"311","line":127,"column":10,"nodeType":"304","messageId":"305","endLine":127,"endColumn":30},{"ruleId":"302","severity":1,"message":"312","line":181,"column":10,"nodeType":"304","messageId":"305","endLine":181,"endColumn":30},{"ruleId":"313","severity":1,"message":"314","line":419,"column":40,"nodeType":"315","messageId":"316","endLine":419,"endColumn":42},{"ruleId":"302","severity":1,"message":"317","line":4,"column":8,"nodeType":"304","messageId":"305","endLine":4,"endColumn":14},{"ruleId":"302","severity":1,"message":"318","line":5,"column":8,"nodeType":"304","messageId":"305","endLine":5,"endColumn":24},{"ruleId":"302","severity":1,"message":"319","line":6,"column":8,"nodeType":"304","messageId":"305","endLine":6,"endColumn":17},{"ruleId":"302","severity":1,"message":"317","line":4,"column":8,"nodeType":"304","messageId":"305","endLine":4,"endColumn":14},{"ruleId":"302","severity":1,"message":"318","line":5,"column":8,"nodeType":"304","messageId":"305","endLine":5,"endColumn":24},{"ruleId":"320","severity":1,"message":"321","line":7,"column":17,"nodeType":"322","messageId":"323","endLine":7,"endColumn":34},{"ruleId":"324","severity":1,"message":"325","line":10,"column":35,"nodeType":"326","messageId":"327","endLine":10,"endColumn":36,"suggestions":"328"},{"ruleId":"324","severity":1,"message":"325","line":10,"column":40,"nodeType":"326","messageId":"327","endLine":10,"endColumn":41,"suggestions":"329"},{"ruleId":"320","severity":1,"message":"321","line":41,"column":17,"nodeType":"322","messageId":"323","endLine":41,"endColumn":34},{"ruleId":"324","severity":1,"message":"325","line":44,"column":35,"nodeType":"326","messageId":"327","endLine":44,"endColumn":36,"suggestions":"330"},{"ruleId":"324","severity":1,"message":"325","line":44,"column":40,"nodeType":"326","messageId":"327","endLine":44,"endColumn":41,"suggestions":"331"},{"ruleId":"298","severity":1,"message":"332","line":86,"column":25,"nodeType":"300","messageId":"301","endLine":86,"endColumn":27},{"ruleId":"302","severity":1,"message":"333","line":115,"column":7,"nodeType":"304","messageId":"305","endLine":115,"endColumn":12},{"ruleId":"302","severity":1,"message":"334","line":4,"column":8,"nodeType":"304","messageId":"305","endLine":4,"endColumn":12},{"ruleId":"302","severity":1,"message":"335","line":37,"column":9,"nodeType":"304","messageId":"305","endLine":37,"endColumn":12},{"ruleId":"302","severity":1,"message":"335","line":224,"column":9,"nodeType":"304","messageId":"305","endLine":224,"endColumn":12},{"ruleId":"302","severity":1,"message":"334","line":6,"column":9,"nodeType":"304","messageId":"305","endLine":6,"endColumn":13},{"ruleId":"302","severity":1,"message":"336","line":7,"column":8,"nodeType":"304","messageId":"305","endLine":7,"endColumn":14},{"ruleId":"298","severity":1,"message":"299","line":84,"column":36,"nodeType":"300","messageId":"301","endLine":84,"endColumn":38},{"ruleId":"302","severity":1,"message":"337","line":225,"column":15,"nodeType":"304","messageId":"305","endLine":225,"endColumn":29},{"ruleId":"302","severity":1,"message":"338","line":228,"column":15,"nodeType":"304","messageId":"305","endLine":228,"endColumn":18},{"ruleId":"302","severity":1,"message":"339","line":230,"column":15,"nodeType":"304","messageId":"305","endLine":230,"endColumn":20},{"ruleId":"302","severity":1,"message":"340","line":59,"column":11,"nodeType":"304","messageId":"305","endLine":59,"endColumn":14},{"ruleId":"302","severity":1,"message":"341","line":7,"column":9,"nodeType":"304","messageId":"305","endLine":7,"endColumn":19},{"ruleId":"298","severity":1,"message":"332","line":44,"column":29,"nodeType":"300","messageId":"301","endLine":44,"endColumn":31},{"ruleId":"302","severity":1,"message":"337","line":109,"column":11,"nodeType":"304","messageId":"305","endLine":109,"endColumn":25},{"ruleId":"302","severity":1,"message":"342","line":11,"column":8,"nodeType":"304","messageId":"305","endLine":11,"endColumn":16},{"ruleId":"302","severity":1,"message":"343","line":12,"column":8,"nodeType":"304","messageId":"305","endLine":12,"endColumn":20},{"ruleId":"302","severity":1,"message":"344","line":13,"column":8,"nodeType":"304","messageId":"305","endLine":13,"endColumn":23},{"ruleId":"302","severity":1,"message":"345","line":6,"column":8,"nodeType":"304","messageId":"305","endLine":6,"endColumn":19},{"ruleId":"302","severity":1,"message":"346","line":8,"column":8,"nodeType":"304","messageId":"305","endLine":8,"endColumn":19},{"ruleId":"302","severity":1,"message":"347","line":13,"column":8,"nodeType":"304","messageId":"305","endLine":13,"endColumn":16},{"ruleId":"348","severity":1,"message":"349","line":117,"column":31,"nodeType":"350","endLine":117,"endColumn":55},"no-native-reassign",["351"],"no-negated-in-lhs",["352"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'recipientNew' is assigned a value but never used.","Identifier","unusedVar","'transferCurrency' is defined but never used.","'transferCurrencyZeroFee' is defined but never used.","'CURRENCY' is defined but never used.","'AddCircle' is defined but never used.","'Fragment' is defined but never used.","'IncomingCardTransfer' is defined but never used.","'OutgoingCardTransfer' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Switch' is defined but never used.","'FormControlLabel' is defined but never used.","'FormGroup' is defined but never used.","no-new-wrappers","Do not use Number as a constructor.","NewExpression","noConstructor","no-useless-escape","Unnecessary escape character: \\d.","Literal","unnecessaryEscape",["353","354"],["355","356"],["357","358"],["359","360"],"Expected '!==' and instead saw '!='.","'valid' is defined but never used.","'Link' is defined but never used.","'min' is assigned a value but never used.","'Button' is defined but never used.","'numColumnStyle' is assigned a value but never used.","'bid' is assigned a value but never used.","'quant' is assigned a value but never used.","'max' is assigned a value but never used.","'OrderBooks' is defined but never used.","'GridList' is defined but never used.","'GridListTile' is defined but never used.","'GridListTileBar' is defined but never used.","'CardContent' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-global-assign","no-unsafe-negation",{"messageId":"361","fix":"362","desc":"363"},{"messageId":"364","fix":"365","desc":"366"},{"messageId":"361","fix":"367","desc":"363"},{"messageId":"364","fix":"368","desc":"366"},{"messageId":"361","fix":"369","desc":"363"},{"messageId":"364","fix":"370","desc":"366"},{"messageId":"361","fix":"371","desc":"363"},{"messageId":"364","fix":"372","desc":"366"},"removeEscape",{"range":"373","text":"374"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"375","text":"376"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"377","text":"374"},{"range":"378","text":"376"},{"range":"379","text":"374"},{"range":"380","text":"376"},{"range":"381","text":"374"},{"range":"382","text":"376"},[297,298],"",[297,297],"\\",[302,303],[302,302],[1242,1243],[1242,1242],[1247,1248],[1247,1247]]